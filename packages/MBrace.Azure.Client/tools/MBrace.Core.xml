<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MBrace.Core</name></assembly>
<members>
<member name="">

</member>
<member name="P:MBrace.Cloud.IsTargetedWorkerSupported">
<summary>
 Returns true iff runtime supports executing workflows in specific worker.
 Should be used with combinators that support worker targeting like Cloud.Parallel/Choice/StartChild.
</summary>
</member>
<member name="P:MBrace.Cloud.FaultPolicy">
 <summary>
     Gets the current fault policy.
 </summary>
</member>
<member name="P:MBrace.Cloud.CurrentWorker">
 <summary>
     Gets information on the execution cluster.
 </summary>
</member>
<member name="P:MBrace.Cloud.CancellationToken">
 <summary>
     Gets the current cancellation token.
 </summary>
</member>
<member name="M:MBrace.Cloud.WithFaultPolicy``1(MBrace.FaultPolicy,MBrace.Cloud{``0})">
 <summary>
     Sets a new fault policy for given workflow.
 </summary>
 <param name="policy">Updated fault policy.</param>
 <param name="workflow">Workflow to be used.</param>
</member>
<member name="M:MBrace.Cloud.TryFinally``1(MBrace.Cloud{``0},MBrace.Local{Microsoft.FSharp.Core.Unit})">
 <summary>
     Try/Finally combinator for monadic finalizers.
 </summary>
 <param name="body">Workflow body.</param>
 <param name="finalizer">Finalizer workflow.</param>
</member>
<member name="M:MBrace.Cloud.StartChild``1(MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{MBrace.IWorkerRef})">
 <summary>
     Start cloud computation as child process. Returns a cloud workflow that queries the result.
 </summary>
 <param name="computation">Computation to be executed.</param>
 <param name="target">Optional worker to execute the computation on; defaults to scheduler decision.</param>
</member>
<member name="M:MBrace.Cloud.StartAsCloudTask``1(MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{MBrace.FaultPolicy},Microsoft.FSharp.Core.FSharpOption{MBrace.IWorkerRef},Microsoft.FSharp.Core.FSharpOption{MBrace.ICloudCancellationToken})">
 <summary>
     Start cloud computation as a task. Returns a cloud workflow that queries the result.
 </summary>
 <param name="computation">Computation to be executed.</param>
 <param name="target">Optional worker to execute the computation on; defaults to scheduler decision.</param>
 <param name="cancellationToken">Cancellation token for task. Defaults to current cancellation token.</param>
</member>
<member name="M:MBrace.Cloud.Sleep(System.Int32)">
 <summary>
     Creates a cloud workflow that asynchronously sleeps for a given amount of time.
 </summary>
 <param name="millisecondsDue">Milliseconds to suspend computation.</param>
</member>
<member name="M:MBrace.Cloud.Raise``1(System.Exception)">
 <summary>
     Raise an exception.
 </summary>
 <param name="e">exception to be raised.</param>
</member>
<member name="M:MBrace.Cloud.ParallelEverywhere``1(MBrace.Cloud{``0})">
 <summary>
     Creates a cloud computation that will execute provided computation on every available worker
     in the cluster and if successful returns the array of gathered results.
     This operator may create distribution.
     Any exception raised by children carry cancellation semantics.
 </summary>
 <param name="computation">Computation to be executed in every worker.</param>
</member>
<member name="M:MBrace.Cloud.Parallel``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,MBrace.IWorkerRef}})">
 <summary>
     Creates a cloud computation that will execute given computations to targeted workers
     possibly in parallel and if successful returns the array of gathered results.
     This operator may create distribution.
     Exceptions raised by children carry cancellation semantics.
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:MBrace.Cloud.Parallel``2(MBrace.Cloud{``0},MBrace.Cloud{``1})">
 <summary>
     Creates a cloud computation that will execute the given computations
     possibly in parallel and if successful returns the pair of results.
     This operator may create distribution.
     Exceptions raised by children carry cancellation semantics.
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:MBrace.Cloud.Parallel``2(System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Creates a cloud computation that will execute the given computations
     possibly in parallel and if successful returns the array of gathered results.
     This operator may create distribution.
     Exceptions raised by children carry cancellation semantics.
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:MBrace.Cloud.OfAsync``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>
     Wraps an asynchronous workflow into a cloud workflow.
 </summary>
 <param name="asyncWorkflow">Asynchronous workflow to be wrapped.</param>
</member>
<member name="M:MBrace.Cloud.Logf``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,MBrace.Local{Microsoft.FSharp.Core.Unit}})">
 <summary>
     Writes an entry to a logging provider, if it exists.
 </summary>
 <param name="logEntry">Added log entry.</param>
</member>
<member name="M:MBrace.Cloud.Log(System.String)">
 <summary>
     Writes an entry to a logging provider, if it exists.
 </summary>
 <param name="logEntry">Added log entry.</param>
</member>
<member name="M:MBrace.Cloud.Ignore``2(``0)">
 <summary>
     Performs a cloud computations, discarding its result
 </summary>
 <param name="workflow"></param>
</member>
<member name="M:MBrace.Cloud.GetWorkerCount">
 <summary>
     Gets total number of available workers in cluster context.
 </summary>
</member>
<member name="M:MBrace.Cloud.GetProcessId">
 <summary>
     Gets the assigned id of the currently running cloud process.
 </summary>
</member>
<member name="M:MBrace.Cloud.GetJobId">
 <summary>
     Gets the assigned id of the currently running cloud job.
 </summary>
</member>
<member name="M:MBrace.Cloud.GetAvailableWorkers">
 <summary>
     Gets all workers in currently running cluster context.
 </summary>
</member>
<member name="M:MBrace.Cloud.Dispose``1(``0)">
 <summary>
     Disposes of a distributed resource.
 </summary>
 <param name="disposable">Resource to be disposed.</param>
</member>
<member name="M:MBrace.Cloud.CreateLinkedCancellationTokenSource(System.Collections.Generic.IEnumerable{MBrace.ICloudCancellationToken})">
 <summary>
     Creates a linked cloud cancellation token source.
 </summary>
 <param name="tokens">Parent cancellation tokens.</param>
</member>
<member name="M:MBrace.Cloud.CreateLinkedCancellationTokenSource(MBrace.ICloudCancellationToken,MBrace.ICloudCancellationToken)">
 <summary>
     Creates a linked cloud cancellation token source.
 </summary>
 <param name="token1">First parent cancellation token.</param>
 <param name="token2">Second parent cancellation token.</param>s
</member>
<member name="M:MBrace.Cloud.CreateLinkedCancellationTokenSource(Microsoft.FSharp.Core.FSharpOption{MBrace.ICloudCancellationToken})">
 <summary>
     Creates a linked cloud cancellation token source.
 </summary>
 <param name="parent">Parent cancellation token. Defaults to the current process cancellation token.</param>
</member>
<member name="M:MBrace.Cloud.CreateCancellationTokenSource">
<summary>
 Creates a new cloud cancellation token source
</summary>
</member>
<member name="M:MBrace.Cloud.ChoiceEverywhere``1(MBrace.Cloud{Microsoft.FSharp.Core.FSharpOption{``0}})">
 <summary>
     Returns a cloud computation that will execute the given computation on every available worker
     possibly in parallel and will return when any of the supplied computations
     have returned a successful value or if all of them fail to succeed. 
     If a computation succeeds the rest of them are canceled.
     The success of a computation is encoded as an option type.
     This operator may create distribution.
 </summary>
 <param name="computation">Input computation to be executed everywhere.</param>
</member>
<member name="M:MBrace.Cloud.Choice``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,MBrace.IWorkerRef}})">
 <summary>
     Returns a cloud computation that will execute the given computation on the corresponding worker,
     possibly in parallel and will return when any of the supplied computations
     have returned a successful value or if all of them fail to succeed. 
     If a computation succeeds the rest of them are canceled.
     The success of a computation is encoded as an option type.
     This operator may create distribution.
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:MBrace.Cloud.Choice``2(System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Returns a cloud computation that will execute given computations
     possibly in parallel and will return when any of the supplied computations
     have returned a successful value or if all of them fail to succeed. 
     If a computation succeeds the rest of them are canceled.
     The success of a computation is encoded as an option type.
     This operator may create distribution.
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:MBrace.Cloud.Catch``1(MBrace.Cloud{``0})">
 <summary>
     Catch exception from given cloud workflow.
 </summary>
 <param name="cloudWorkflow">Workflow to be protected.</param>
</member>
<member name="M:MBrace.Cloud.AwaitTask``1(System.Threading.Tasks.Task{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Asynchronously awaits a System.Threading.Task for completion.
 </summary>
 <param name="task">Awaited task.</param>
 <param name="timeoutMilliseconds">Timeout in milliseconds. Defaults to infinite timeout.</param>
</member>
<member name="M:MBrace.Cloud.AwaitCloudTask``1(MBrace.ICloudTask{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Asynchronously awaits cloud task for completion and returns its result.
 </summary>
 <param name="task">Task to be awaited.</param>
 <param name="timeoutMilliseconds">Timeout in milliseconds. Defaults to infinite</param>
</member>
<member name="M:MBrace.Cloud.AsLocal``1(MBrace.Cloud{``0})">
 <summary>
     Wraps provided cloud workflow as a local workflow.
     Any distributed parallelism combinators called by the
     workflow will be re-interpreted using thread parallelism semantics.
 </summary>
 <param name="workflow">Cloud workflow to be wrapped.</param>
</member>
<member name="T:MBrace.Cloud">
<summary>
 Cloud workflows user API
</summary>
</member>
<member name="M:MBrace.CloudAtom.Update``1(MBrace.ICloudAtom{``0},Microsoft.FSharp.Core.FSharpFunc{``0,``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Atomically updates the contained value.
 </summary>
 <param name="updater">value updating function.</param>
 <param name="atom">Atom instance to be updated.</param>
 <param name="maxRetries">Maximum number of retries before giving up. Defaults to infinite.</param>
</member>
<member name="M:MBrace.CloudAtom.Transact``2(MBrace.ICloudAtom{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``1,``0}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Transactionally updates the contained value.
 </summary>
 <param name="atom">Input atom.</param>
 <param name="transactF">Transaction function.</param>
 <param name="maxRetries">Maximum number of retries before giving up. Defaults to infinite.</param>
</member>
<member name="M:MBrace.CloudAtom.Read``1(MBrace.ICloudAtom{``0})">
 <summary>
     Dereferences a cloud atom.
 </summary>
 <param name="atom">Atom instance.</param>
</member>
<member name="M:MBrace.CloudAtom.New``1(``0,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new cloud atom instance with given value.
 </summary>
 <param name="initial">Initial value.</param>
</member>
<member name="M:MBrace.CloudAtom.IsSupportedValue``1(``0)">
 <summary>
     Checks if value is supported by current table store.
 </summary>
 <param name="value">Value to be checked.</param>
</member>
<member name="M:MBrace.CloudAtom.Incr``2(MBrace.ICloudAtom{``0})">
 <summary>
     Increments a cloud counter by one.
 </summary>
 <param name="atom">Input atom.</param>
</member>
<member name="M:MBrace.CloudAtom.Force``1(MBrace.ICloudAtom{``0},``0)">
 <summary>
     Forces the contained value to provided argument.
 </summary>
 <param name="value">Value to be set.</param>
 <param name="atom">Atom instance to be updated.</param>
</member>
<member name="M:MBrace.CloudAtom.DeleteContainer(System.String)">
 <summary>
     Deletes container and all its contained atoms.
 </summary>
 <param name="container"></param>
</member>
<member name="M:MBrace.CloudAtom.Delete``1(MBrace.ICloudAtom{``0})">
 <summary>
     Deletes the provided atom instance from store.
 </summary>
 <param name="atom">Atom instance to be deleted.</param>
</member>
<member name="M:MBrace.CloudAtom.Decr``2(MBrace.ICloudAtom{``0})">
 <summary>
     Decrements a cloud counter by one.
 </summary>
 <param name="atom">Input atom.</param>
</member>
<member name="M:MBrace.CloudAtom.CreateContainerName">
<summary>
 Generates a unique container name.
</summary>
</member>
<member name="">

</member>
<member name="T:MBrace.CloudAttribute">
<summary>
 Adding this attribute to a let-binding marks that
 the value definition contains cloud expressions.
</summary>
</member>
<member name="M:MBrace.CloudCacheable.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,MBrace.Local{``0}})">
 <summary>
     Creates a computation that can be cached on demand to worker instances.
 </summary>
 <param name="evaluator">Evaluator workflow.</param>
</member>
<member name="M:MBrace.CloudCacheable.Create``1(MBrace.Local{``0})">
 <summary>
     Creates a computation that can be cached on demand to worker instances.
 </summary>
 <param name="evaluator">Evaluator workflow.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.CloudCacheable`1.Value">
 <summary>
     Evaluates the entity, returning the locally cached value if it already exists.
 </summary>
</member>
<member name="P:MBrace.CloudCacheable`1.IsCachedLocally">
 <summary>
     Returns true if value is cached in the local execution context.
 </summary>
</member>
<member name="M:MBrace.CloudCacheable`1.PopulateCache">
 <summary>
     Attempt to cache computation to local execution context.
     Returns true if succesful or already cached.
 </summary>
</member>
<member name="">

</member>
<member name="T:MBrace.CloudCacheable`1">
<summary>
 Defines a defered computation whose result can be
 cached in-memory and on-demand to worker machines.
</summary>
</member>
<member name="M:MBrace.CloudCell.Read``1(MBrace.CloudCell{``0})">
 <summary>
     Dereference a Cloud cell.
 </summary>
 <param name="cloudCell">CloudCell to be dereferenced.</param>
</member>
<member name="M:MBrace.CloudCell.Parse``1(System.String,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Parses a cloud cell of given type with provided serializer. If successful, returns the cloud cell instance.
 </summary>
 <param name="path">Path to cloud cell.</param>
 <param name="serializer">Serializer for cloud cell.</param>
</member>
<member name="M:MBrace.CloudCell.New``1(``0,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a new local reference to the underlying store with provided value.
     Cloud cells are immutable and cached locally for performance.
 </summary>
 <param name="value">Cloud cell value.</param>
 <param name="directory">FileStore directory used for cloud cell. Defaults to execution context setting.</param>
 <param name="serializer">Serializer used for object serialization. Defaults to runtime context.</param>
</member>
<member name="M:MBrace.CloudCell.FromTextFile``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.StreamReader,``0},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudCell parsing a text file.
 </summary>
 <param name="path">Path to file.</param>
 <param name="textDeserializer">Text deserializer function.</param>
 <param name="encoding">Text encoding. Defaults to UTF8.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudCell.FromFile``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,``0},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudCell from file path with user-provided deserialization function.
 </summary>
 <param name="path">Path to file.</param>
 <param name="deserializer">Sequence deserializer function.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudCell.Dispose``1(MBrace.CloudCell{``0})">
 <summary>
     Disposes cloud cell from store.
 </summary>
 <param name="cloudCell">Cloud cell to be deleted.</param>
</member>
<member name="M:MBrace.CloudCell.Cache``1(MBrace.CloudCell{``0})">
 <summary>
     Cache a cloud cell to local execution context.
 </summary>
 <param name="cloudCell">Cloud cell input.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.CloudCell`1.Value">
<summary>
 Dereference the cloud cell
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.CloudCell`1.Size">
<summary>
 Gets the size of cloud cell in bytes
</summary>
</member>
<member name="P:MBrace.CloudCell`1.Path">
<summary>
 Path to cloud cell payload in store
</summary>
</member>
<member name="P:MBrace.CloudCell`1.IsCachedLocally">
<summary>
 Indicates if array is cached in local execution context
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.CloudCell`1.PopulateCache">
<summary>
 Caches the cloud cell value to the local execution contexts. Returns true iff successful.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.CloudCell`1">
<summary>
 Represents an immutable reference to an
 object that is persisted in the underlying store.
 Cloud cells cached locally for performance.
</summary>
</member>
<member name="M:MBrace.CloudChannel.Send``1(MBrace.ISendPort{``0},``0)">
 <summary>
     Send message to the channel.
 </summary>
 <param name="message">Message to send.</param>
 <param name="channel">Target channel.</param>
</member>
<member name="M:MBrace.CloudChannel.Receive``1(MBrace.IReceivePort{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Receive message from channel.
 </summary>
 <param name="channel">Source channel.</param>
 <param name="timeout">Timeout in milliseconds.</param>
</member>
<member name="M:MBrace.CloudChannel.New``1(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new channel instance.
 </summary>
 <param name="container">Container to channel. Defaults to process default.</param>
</member>
<member name="M:MBrace.CloudChannel.DeleteContainer(System.String)">
 <summary>
     Deletes container and all its contained channels.
 </summary>
 <param name="container"></param>
</member>
<member name="M:MBrace.CloudChannel.Delete``1(MBrace.IReceivePort{``0})">
 <summary>
     Deletes cloud channel instance.
 </summary>
 <param name="channel">Channel to be disposed.</param>
</member>
<member name="M:MBrace.CloudChannel.CreateContainerName">
<summary>
 Generates a unique container name.
</summary>
</member>
<member name="T:MBrace.CloudChannel">
<summary>
 Channel methods for MBrace
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.CloudDirectory.Path">
<summary>
 Path to directory
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.CloudDirectory.Exists(MBrace.CloudDirectory)">
 <summary>
     Checks if directory exists in given path
 </summary>
 <param name="directory">Path to directory.</param>
</member>
<member name="M:MBrace.CloudDirectory.Exists(System.String)">
 <summary>
     Checks if directory exists in given path
 </summary>
 <param name="directory">Path to directory.</param>
</member>
<member name="M:MBrace.CloudDirectory.Enumerate(Microsoft.FSharp.Core.FSharpOption{MBrace.CloudDirectory})">
 <summary>
     Gets all files that exist in given container.
 </summary>
 <param name="directory">Path to directory. Defaults to the process directory.</param>
</member>
<member name="M:MBrace.CloudDirectory.Enumerate(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Enumerates all directories contained in path.
 </summary>
 <param name="directory">Directory to be enumerated. Defaults to root directory.</param>
</member>
<member name="">

</member>
<member name="M:MBrace.CloudDirectory.Delete(MBrace.CloudDirectory,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Deletes directory from store.
 </summary>
 <param name="directory">Directory to be deleted.</param>
 <param name="recursiveDelete">Delete recursively. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudDirectory.Delete(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Deletes directory from store.
 </summary>
 <param name="directory">Directory to be deleted.</param>
 <param name="recursiveDelete">Delete recursively. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudDirectory.Create(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new directory in store.
 </summary>
 <param name="directory">Path to directory. Defaults to randomly generated directory.</param>
</member>
<member name="M:MBrace.CloudDirectory.#ctor(System.String)">
 <summary>
     Defines a reference to a cloud directory. This will not create a directory in the local store.
 </summary>
 <param name="path">Path to directory.</param>
</member>
<member name="T:MBrace.CloudDirectory">
<summary>
 Represents a directory found in the cloud store
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.CloudFile.Path">
<summary>
 Path to cloud file
</summary>
</member>
<member name="M:MBrace.CloudFile.WriteAllText(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Writes string contents to given CloudFile.
 </summary>
 <param name="text">Input text.</param>
 <param name="encoding">Output encoding.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:MBrace.CloudFile.WriteAllLines(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes a sequence of lines to a given CloudFile path.
 </summary>
 <param name="lines">Lines to be written.</param>
 <param name="encoding">Text encoding.</param>
 <param name="path">Path to CloudFile.</param>
</member>
<member name="M:MBrace.CloudFile.WriteAllBytes(System.Byte[],Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Write buffer contents to CloudFile.
 </summary>
 <param name="buffer">Source buffer.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:MBrace.CloudFile.Upload(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Uploads a local file to store.
 </summary>
 <param name="localFile">Local path to file.</param>
 <param name="targetDirectory">Containing directory in cloud store. Defaults to process default.</param>
</member>
<member name="">

</member>
<member name="M:MBrace.CloudFile.ReadLines(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as a sequence of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.CloudFile.ReadLines(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as a sequence of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.CloudFile.ReadAllText(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Dump all file contents to a single string.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.CloudFile.ReadAllText(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Dump all file contents to a single string.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.CloudFile.ReadAllLines(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as an array of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.CloudFile.ReadAllLines(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as an array of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.CloudFile.ReadAllBytes(MBrace.CloudFile)">
 <summary>
     Store all contents of given file to a new byte array.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.CloudFile.ReadAllBytes(System.String)">
 <summary>
     Store all contents of given file to a new byte array.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.CloudFile.Read``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Reads file in store with provided deserializer function.
 </summary>
 <param name="file">Input file.</param>
 <param name="deserializer">Deserializer function.</param>
 <param name="leaveOpen">Do not dispose stream after deserialization. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudFile.Read``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Reads file in store with provided deserializer function.
 </summary>
 <param name="path">Input file.</param>
 <param name="deserializer">Deserializer function.</param>
 <param name="leaveOpen">Do not dispose stream after deserialization. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudFile.GetSize(MBrace.CloudFile)">
 <summary>
     Gets the size of provided file, in bytes.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.CloudFile.GetSize(System.String)">
 <summary>
     Gets the size of provided file, in bytes.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.CloudFile.Exists(MBrace.CloudFile)">
 <summary>
     Checks if file exists in store.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.CloudFile.Exists(System.String)">
 <summary>
     Checks if file exists in store.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.CloudFile.Enumerate(Microsoft.FSharp.Core.FSharpOption{MBrace.CloudDirectory})">
 <summary>
     Gets all files that exist in given container.
 </summary>
 <param name="directory">Path to directory. Defaults to the process directory.</param>
</member>
<member name="M:MBrace.CloudFile.Enumerate(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Gets all files that exist in given container.
 </summary>
 <param name="directory">Path to directory. Defaults to the process directory.</param>
</member>
<member name="">

</member>
<member name="M:MBrace.CloudFile.Delete(MBrace.CloudFile)">
 <summary>
     Deletes file in given path.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.CloudFile.Delete(System.String)">
 <summary>
     Deletes file in given path.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.CloudFile.Create(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},System.String,System.String)">
 <summary>
     Creates a new file in store with provided serializer function.
 </summary>
 <param name="serializer">Serializer function.</param>
 <param name="directory">Containing directory.</param>
 <param name="fileName">File name.</param>
</member>
<member name="M:MBrace.CloudFile.Create(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new file in store with provided serializer function.
 </summary>
 <param name="serializer">Serializer function.</param>
 <param name="path">Path to file. Defaults to auto-generated path.</param>
</member>
<member name="M:MBrace.CloudFile.#ctor(System.String)">
 <summary>
     Defines a reference to a cloud file. This will not create a file in the local store.
 </summary>
 <param name="path">Path to file.</param>
</member>
<member name="T:MBrace.CloudFile">
<summary>
 Represents a file found in the local store
</summary>
</member>
<member name="M:MBrace.CloudSequence.Parse``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Parses an already existing sequence of given type in provided file store.
 </summary>
 <param name="file">Target cloud file.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudSequence.Parse``1(System.String,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Parses an already existing sequence of given type in provided file store.
 </summary>
 <param name="path">Path to Cloud sequence.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudSequence.NewPartitioned``1(System.Collections.Generic.IEnumerable{``0},System.Int64,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a collection of Cloud sequences partitioned by file size.
 </summary>
 <param name="values">Input sequence.</param>
 <param name="maxPartitionSize">Maximum size in bytes per Cloud sequence partition.</param>
 <param name="directory"></param>
 <param name="serializer"></param>
 <param name="directory">FileStore directory used for Cloud sequence. Defaults to execution context.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
</member>
<member name="M:MBrace.CloudSequence.New``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a new Cloud sequence with given values in the underlying store.
     Cloud sequences are cached locally for performance.
 </summary>
 <param name="values">Input sequence.</param>
 <param name="directory">FileStore directory used for Cloud sequence. Defaults to execution context.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
</member>
<member name="M:MBrace.CloudSequence.FromTextFile``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.StreamReader,System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudSequence from text file.
 </summary>
 <param name="path">Path to file.</param>
 <param name="textDeserializer">Text deserializer function.</param>
 <param name="encoding">Text encoding. Defaults to UTF8.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudSequence.FromFile``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudSequence from file path with user-provided deserialization function.
 </summary>
 <param name="file">Target cloud file.</param>
 <param name="deserializer">Sequence deserializer function.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.CloudSequence.FromFile``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudSequence from file path with user-provided deserialization function.
 </summary>
 <param name="path">Path to file.</param>
 <param name="deserializer">Sequence deserializer function.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.CloudSequence`1.Size">
<summary>
 Underlying sequence size in bytes
</summary>
</member>
<member name="P:MBrace.CloudSequence`1.Path">
<summary>
 Path to Cloud sequence in store
</summary>
</member>
<member name="P:MBrace.CloudSequence`1.IsCachedLocally">
<summary>
 Indicates if array is cached in local execution context
</summary>
</member>
<member name="">

</member>
<member name="P:MBrace.CloudSequence`1.Count">
<summary>
 Cloud sequence element count
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.CloudSequence`1.ToEnumerable">
<summary>
 Returns an enumerable that lazily fetches elements of the cloud sequence from store.
</summary>
</member>
<member name="M:MBrace.CloudSequence`1.ToArray">
<summary>
 Fetches all elements of the cloud sequence and returns them as a local array.
</summary>
</member>
<member name="M:MBrace.CloudSequence`1.PopulateCache">
<summary>
 Cache contents to local execution context. Returns true iff succesful.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.CloudSequence`1">
 <summary>
     Ordered, immutable collection of values persisted in a single FileStore entity.
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Cloud`1">
<summary>
 Representation of an MBrace workflow, which, when run 
 will produce a value of type &apos;T, or raise an exception.
 Representation of a cloud computation, which, when run 
 will produce a value of type &apos;T, or raise an exception.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.FaultException">
<summary>
 Exception indicating fault in MBrace runtime
</summary>
</member>
<member name="">

</member>
<member name="P:MBrace.FaultPolicy.NoRetry">
<summary>
 Makes no attempt at retrying, raising fault exception at the first occurrence.
</summary>
</member>
<member name="M:MBrace.FaultPolicy.Retry(System.Int32,Microsoft.FSharp.Core.FSharpOption{System.TimeSpan})">
 <summary>
     Retries at most a given number of times.
 </summary>
 <param name="maxRetries">Maximum number of retries.</param>
 <param name="delay">Delay before each retry. Defaults to zero.</param>
</member>
<member name="M:MBrace.FaultPolicy.MapDelay(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.TimeSpan})">
 <summary>
     Retries with delay mapped to attempt number.
 </summary>
 <param name="maxRetries">Maximum number of retries.</param>
 <param name="delayF">Delay mapping function.</param>
</member>
<member name="M:MBrace.FaultPolicy.InfiniteRetry(Microsoft.FSharp.Core.FSharpOption{System.TimeSpan})">
 <summary>
     Forever re-attempt faulted computations.
 </summary>
 <param name="delay">Delay before each retry. Defaults to zero.</param>
</member>
<member name="M:MBrace.FaultPolicy.Filter``1(Microsoft.FSharp.Core.FSharpOption{System.TimeSpan})">
 <summary>
     Retries as long as exception of given type is raised.
 </summary>
 <param name="delay">Delay before each retry. Defaults to zero.</param>
</member>
<member name="M:MBrace.FaultPolicy.ExponentialDelay(System.Int32,Microsoft.FSharp.Core.FSharpOption{System.TimeSpan})">
 <summary>
     Exponentially delays after each retry.
 </summary>
 <param name="maxRetries">Maximum number of retries.</param>
 <param name="initialDelay">Initial delay. Defaults to 50ms</param>
</member>
<member name="T:MBrace.FaultPolicy">
<summary>
 Fault recovery policy used in runtime execution;
 takes number of attempts and fault exception returning
 the recovery action: either fail or retry after given delay.
</summary>
</member>
<member name="P:MBrace.FileStore.Current">
<summary>
 Returns the file store instance carried in current execution context.
</summary>
</member>
<member name="M:MBrace.FileStore.GetRandomFileName(Microsoft.FSharp.Core.FSharpOption{MBrace.CloudDirectory})">
 <summary>
     Creates a uniquely defined file path for given container.
 </summary>
 <param name="container">Path to containing directory. Defaults to process directory.</param>
</member>
<member name="M:MBrace.FileStore.GetRandomFileName(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a uniquely defined file path for given container.
 </summary>
 <param name="container">Path to containing directory. Defaults to process directory.</param>
</member>
<member name="M:MBrace.FileStore.GetRandomDirectoryName">
<summary>
 Generates a random, uniquely specified path to directory
</summary>
</member>
<member name="M:MBrace.FileStore.GetFileName(System.String)">
 <summary>
     Returns the file name for given path.
 </summary>
 <param name="path">Input file path.</param>
</member>
<member name="M:MBrace.FileStore.GetDirectoryName(System.String)">
 <summary>
     Returns the directory name for given path.
 </summary>
 <param name="path">Input file path.</param>
</member>
<member name="M:MBrace.FileStore.Combine(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
     Combines a collection of file names with provided directory prefix.
 </summary>
 <param name="directory">Directory prefix path.</param>
 <param name="fileNames">File names to be combined.</param>
</member>
<member name="M:MBrace.FileStore.Combine(System.String[])">
 <summary>
     Combines an array of paths into a path.
 </summary>
 <param name="paths">Strings to be combined.</param>
</member>
<member name="M:MBrace.FileStore.Combine(System.String,System.String,System.String)">
 <summary>
     Combines three strings into one path.
 </summary>
 <param name="path1">First path.</param>
 <param name="path2">Second path.</param>
 <param name="path3">Third path.</param>
</member>
<member name="M:MBrace.FileStore.Combine(System.String,System.String)">
 <summary>
     Combines two strings into one path.
 </summary>
 <param name="path1">First path.</param>
 <param name="path2">Second path.</param>
</member>
<member name="T:MBrace.FileStore">
<summary>
 Generic FileStore utilities
</summary>
</member>
<member name="P:MBrace.ICloudAtom`1.Value">
<summary>
 Gets the current value of the atom.
</summary>
</member>
<member name="P:MBrace.ICloudAtom`1.Id">
<summary>
 Cloud atom identifier
</summary>
</member>
<member name="M:MBrace.ICloudAtom`1.Update(Microsoft.FSharp.Core.FSharpFunc{`0,`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Atomically updates table entry of given id using updating function.
 </summary>
 <param name="updater">Value updating function</param>
 <param name="maxRetries">Maximum retries under optimistic semantics. Defaults to infinite.</param>
</member>
<member name="M:MBrace.ICloudAtom`1.Force(`0)">
 <summary>
      Forces a value on atom.
 </summary>
 <param name="value">value to be set.</param>
</member>
<member name="T:MBrace.ICloudAtom`1">
<summary>
 Represent a distributed atomically updatable value reference
</summary>
</member>
<member name="P:MBrace.ICloudCancellationToken.LocalToken">
<summary>
 Gets a System.Threading.CancellationToken instance
 that is subscribed to the distributed cancellation token.
</summary>
</member>
<member name="P:MBrace.ICloudCancellationToken.IsCancellationRequested">
<summary>
 Gets the cancellation status for the token.
</summary>
</member>
<member name="T:MBrace.ICloudCancellationToken">
<summary>
 Distributed cancellation token abstraction.
</summary>
</member>
<member name="P:MBrace.ICloudCancellationTokenSource.Token">
<summary>
 Gets a cancellation token instance.
</summary>
</member>
<member name="M:MBrace.ICloudCancellationTokenSource.Cancel">
<summary>
 Cancel the cancellation token source.
</summary>
</member>
<member name="T:MBrace.ICloudCancellationTokenSource">
<summary>
 Distributed cancellation token source abstraction.
</summary>
</member>
<member name="M:MBrace.ICloudDisposable.Dispose">
<summary>
 Releases any storage resources used by this object.
</summary>
</member>
<member name="T:MBrace.ICloudDisposable">
<summary>
 Denotes handle to a distributable resource that can be disposed of.
</summary>
</member>
<member name="P:MBrace.ICloudTask`1.Status">
<summary>
 Gets a TaskStatus enumeration indicating the current task state.
</summary>
</member>
<member name="P:MBrace.ICloudTask`1.Result">
<summary>
 Synchronously gets the task result, blocking until it completes.
</summary>
</member>
<member name="P:MBrace.ICloudTask`1.IsFaulted">
<summary>
 Gets a boolean indicating that the task has completed with fault.
</summary>
</member>
<member name="P:MBrace.ICloudTask`1.IsCompleted">
<summary>
 Gets a boolean indicating that the task has completed successfully.
</summary>
</member>
<member name="P:MBrace.ICloudTask`1.IsCanceled">
<summary>
 Gets a boolean indicating that the task has been canceled.
</summary>
</member>
<member name="P:MBrace.ICloudTask`1.Id">
<summary>
 Unique task identifier
</summary>
</member>
<member name="M:MBrace.ICloudTask`1.TryGetResult">
<summary>
 Rreturns the task result if completed or None if still pending.
</summary>
</member>
<member name="M:MBrace.ICloudTask`1.AwaitResult(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Awaits task for completion, returning its eventual result
</summary>
</member>
<member name="T:MBrace.ICloudTask`1">
<summary>
 Denotes a task that is being executed in the cluster.
</summary>
</member>
<member name="P:MBrace.IReceivePort`1.Id">
<summary>
 Channel identifier
</summary>
</member>
<member name="M:MBrace.IReceivePort`1.Receive(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Asynchronously awaits a message from the channel.
 </summary>
 <param name="timeout">Timeout in milliseconds.</param>
</member>
<member name="T:MBrace.IReceivePort`1">
<summary>
 Receiving side of a distributed channel
</summary>
</member>
<member name="P:MBrace.ISendPort`1.Id">
<summary>
 Channel identifier
</summary>
</member>
<member name="M:MBrace.ISendPort`1.Send(`0)">
 <summary>
     Sends a message over the channel
 </summary>
 <param name="message">Message to send.</param>
</member>
<member name="T:MBrace.ISendPort`1">
<summary>
 Sending side of a distributed channel
</summary>
</member>
<member name="P:MBrace.IWorkerRef.Type">
<summary>
 Worker type identifier
</summary>
</member>
<member name="P:MBrace.IWorkerRef.ProcessorCount">
<summary>
 Worker processor count
</summary>
</member>
<member name="P:MBrace.IWorkerRef.Id">
<summary>
 Worker unique identifier
</summary>
</member>
<member name="T:MBrace.IWorkerRef">
<summary>
 Denotes a reference to a worker node in the cluster.
</summary>
</member>
<member name="M:MBrace.Local.TryFinally``1(MBrace.Local{``0},MBrace.Local{Microsoft.FSharp.Core.Unit})">
 <summary>
     Try/Finally combinator for monadic finalizers.
 </summary>
 <param name="body">Workflow body.</param>
 <param name="finalizer">Finalizer workflow.</param>
</member>
<member name="M:MBrace.Local.Parallel``2(MBrace.Local{``0},MBrace.Local{``1})">
 <summary>
     Creates a cloud computation that will execute given computations to targeted workers
     possibly in parallel and if successful returns the array of gathered results.
     This operator may create distribution.
     Exceptions raised by children carry cancellation semantics.
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:MBrace.Local.Parallel``1(System.Collections.Generic.IEnumerable{MBrace.Local{``0}})">
 <summary>
     Creates a cloud computation that will execute given computations to targeted workers
     possibly in parallel and if successful returns the array of gathered results.
     This operator may create distribution.
     Exceptions raised by children carry cancellation semantics.
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:MBrace.Local.Ignore``1(MBrace.Local{``0})">
 <summary>
     Performs a cloud computations, discarding its result
 </summary>
 <param name="workflow"></param>
</member>
<member name="M:MBrace.Local.Choice``1(System.Collections.Generic.IEnumerable{MBrace.Local{Microsoft.FSharp.Core.FSharpOption{``0}}})">
 <summary>
     Returns a cloud computation that will execute given computations
     possibly in parallel and will return when any of the supplied computations
     have returned a successful value or if all of them fail to succeed. 
     If a computation succeeds the rest of them are canceled.
     The success of a computation is encoded as an option type.
     This operator may create distribution.
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:MBrace.Local.Catch``1(MBrace.Local{``0})">
 <summary>
     Catch exception from given cloud workflow.
 </summary>
 <param name="cloudWorkflow">Workflow to be protected.</param>
</member>
<member name="T:MBrace.Local">
<summary>
 Local-parallelism combinators
</summary>
</member>
<member name="">

</member>
<member name="T:MBrace.Local`1">
<summary>
 Representation of an in-memory computation, which, when run 
 will produce a value of type &apos;T, or raise an exception.
</summary>
</member>
<member name="">

</member>
<member name="T:MBrace.NoWarnAttribute">
<summary>
 Disable static check warnings being generated for current workflow.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.PartitionedEnumerable`1">
<summary>
 Partition a seq&lt;&apos;T&gt; to seq&lt;seq&lt;&apos;T&gt;&gt; using a predicate
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.BuilderImpl">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Builders.LocalBuilder">
<summary>
 Local workflow expression builder
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Builders.CloudBuilder">
<summary>
 Cloud workflow expression builder
</summary>
</member>
<member name="P:MBrace.Builders.cloud">
<summary>
 cloud builder instance
</summary>
</member>
<member name="P:MBrace.Builders.local">
<summary>
 local builder instance
</summary>
</member>
<member name="T:MBrace.Builders">
<summary>
 A collection of builder implementations for MBrace workflows
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Client.CloudAtomClient.UpdateAsync``1(MBrace.ICloudAtom{``0},Microsoft.FSharp.Core.FSharpFunc{``0,``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Atomically updates the contained value.
 </summary>
 <param name="updater">value updating function.</param>
 <param name="atom">Atom instance to be updated.</param>
 <param name="maxRetries">Maximum number of retries before giving up. Defaults to infinite.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.Update``1(MBrace.ICloudAtom{``0},Microsoft.FSharp.Core.FSharpFunc{``0,``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Atomically updates the contained value.
 </summary>
 <param name="updater">value updating function.</param>
 <param name="atom">Atom instance to be updated.</param>
 <param name="maxRetries">Maximum number of retries before giving up. Defaults to infinite.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.TransactAsync``2(MBrace.ICloudAtom{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``1,``0}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Transactionally updates the contained value.
 </summary>
 <param name="atom">Atom instance to be updated.</param>
 <param name="transactF">Transaction function.</param>
 <param name="maxRetries">Maximum number of retries before giving up. Defaults to infinite.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.Transact``2(MBrace.ICloudAtom{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``1,``0}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Transactionally updates the contained value.
 </summary>
 <param name="atom">Atom instance to be updated.</param>
 <param name="transactF">Transaction function.</param>
 <param name="maxRetries">Maximum number of retries before giving up. Defaults to infinite.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.ReadAsync``1(MBrace.ICloudAtom{``0})">
 <summary>
     Dereferences a cloud atom.
 </summary>
 <param name="atom">Atom instance.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.Read``1(MBrace.ICloudAtom{``0})">
 <summary>
     Dereferences a cloud atom.
 </summary>
 <param name="atom">Atom instance.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.IsSupportedValue``1(``0)">
 <summary>
     Checks if value is supported by current table store.
 </summary>
 <param name="value">Value to be checked.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.ForceAsync``1(MBrace.ICloudAtom{``0},``0)">
 <summary>
     Forces the contained value to provided argument.
 </summary>
 <param name="value">Value to be set.</param>
 <param name="atom">Atom instance to be updated.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.Force``1(MBrace.ICloudAtom{``0},``0)">
 <summary>
     Forces the contained value to provided argument.
 </summary>
 <param name="value">Value to be set.</param>
 <param name="atom">Atom instance to be updated.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.DeleteContainerAsync(System.String)">
 <summary>
     Deletes the provided atom container and all its contents.
 </summary>
 <param name="container">Container name.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.DeleteContainer(System.String)">
 <summary>
     Deletes the provided atom container and all its contents.
 </summary>
 <param name="container">Container name.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.DeleteAsync``1(MBrace.ICloudAtom{``0})">
 <summary>
     Deletes the provided atom instance from store.
 </summary>
 <param name="atom">Atom instance to be deleted.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.Delete``1(MBrace.ICloudAtom{``0})">
 <summary>
     Deletes the provided atom instance from store.
 </summary>
 <param name="atom">Atom instance to be deleted.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.CreateFromResources(MBrace.Continuation.ResourceRegistry)">
 <summary>
 Create a new FileStoreClient instance from given resources.
 Resources must contain CloudAtomConfiguration value.
 </summary>
 <param name="resources"></param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.CreateAsync``1(``0,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new cloud atom instance with given value.
 </summary>
 <param name="initial">Initial value.</param>
</member>
<member name="M:MBrace.Client.CloudAtomClient.Create``1(``0,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new cloud atom instance with given value.
 </summary>
 <param name="initial">Initial value.</param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.CloudAtomClient">
<summary>
 Collection of client methods for CloudAtom API
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Client.CloudChannelClient.SendAsync``1(MBrace.ISendPort{``0},``0)">
 <summary>
     Send message to the channel.
 </summary>
 <param name="channel">Target channel.</param>
 <param name="message">Message to send.</param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.Send``1(MBrace.ISendPort{``0},``0)">
 <summary>
     Send message to the channel.
 </summary>
 <param name="channel">Target channel.</param>
 <param name="message">Message to send.</param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.ReceiveAsync``1(MBrace.IReceivePort{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Receive message from channel.
 </summary>
 <param name="channel">Source channel.</param>
 <param name="timeout">Timeout in milliseconds.</param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.Receive``1(MBrace.IReceivePort{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Receive message from channel.
 </summary>
 <param name="channel">Source channel.</param>
 <param name="timeout">Timeout in milliseconds.</param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.DeleteContainerAsync(System.String)">
 <summary>
     Deletes the provided channel container and all its contents.
 </summary>
 <param name="container">Container name.</param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.DeleteContainer(System.String)">
 <summary>
     Deletes the provided channel container and all its contents.
 </summary>
 <param name="container">Container name.</param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.DeleteAsync``1(MBrace.IReceivePort{``0})">
 <summary>
     Deletes the provided channel instance.
 </summary>
 <param name="channel">Channel to be deleted.</param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.Delete``1(MBrace.IReceivePort{``0})">
 <summary>
     Deletes the provided channel instance.
 </summary>
 <param name="channel">Channel to be deleted.</param>    
</member>
<member name="M:MBrace.Client.CloudChannelClient.CreateFromResources(MBrace.Continuation.ResourceRegistry)">
 <summary>
 Create a new FileStoreClient instance from given resources.
 Resources must contain CloudChannelConfiguration value.
 </summary>
 <param name="resources"></param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.CreateAsync``1(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new channel instance.
 </summary>
 <param name="container">Container for cloud channel.</param>
</member>
<member name="M:MBrace.Client.CloudChannelClient.Create``1(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new channel instance.
 </summary>
 <param name="container">Container for cloud channel.</param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.CloudChannelClient">
<summary>
 Collection of client methods for CloudAtom API
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Client.CloudDirectoryClient.ExistsAsync(MBrace.CloudDirectory)">
 <summary>
     Checks if directory exists in given path
 </summary>
 <param name="directory">Path to directory.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.ExistsAsync(System.String)">
 <summary>
     Checks if directory exists in given path
 </summary>
 <param name="directory">Path to directory.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.Exists(MBrace.CloudDirectory)">
 <summary>
     Checks if directory exists in given path
 </summary>
 <param name="directory">Path to directory.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.Exists(System.String)">
 <summary>
     Checks if directory exists in given path
 </summary>
 <param name="directory">Path to directory.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.EnumerateAsync(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Enumerates all directories contained in path.
 </summary>
 <param name="directory">Directory to be enumerated. Defaults to root directory.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.Enumerate(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Enumerates all directories contained in path.
 </summary>
 <param name="directory">Directory to be enumerated. Defaults to root directory.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.DeleteAsync(MBrace.CloudDirectory,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Deletes directory from store.
 </summary>
 <param name="directory">Directory to be deleted.</param>
 <param name="recursiveDelete">Delete recursively. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.DeleteAsync(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Deletes directory from store.
 </summary>
 <param name="directory">Directory to be deleted.</param>
 <param name="recursiveDelete">Delete recursively. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.Delete(MBrace.CloudDirectory,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Deletes directory from store.
 </summary>
 <param name="directory">Directory to be deleted.</param>
 <param name="recursiveDelete">Delete recursively. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.Delete(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Deletes directory from store.
 </summary>
 <param name="directory">Directory to be deleted.</param>
 <param name="recursiveDelete">Delete recursively. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.CreateAsync(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new directory in store.
 </summary>
 <param name="directory">Path to directory. Defaults to randomly generated directory.</param>
</member>
<member name="M:MBrace.Client.CloudDirectoryClient.Create(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new directory in store.
 </summary>
 <param name="directory">Path to directory. Defaults to randomly generated directory.</param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.CloudDirectoryClient">
<summary>
 Collection of file store operations
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Client.CloudFileClient.WriteAllTextAsync(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes string contents to given CloudFile.
 </summary>
 <param name="text">Input text.</param>
 <param name="encoding">Output encoding.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.WriteAllText(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes string contents to given CloudFile.
 </summary>
 <param name="text">Input text.</param>
 <param name="encoding">Output encoding.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.WriteAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes a sequence of lines to a given CloudFile path.
 </summary>
 <param name="lines">Lines to be written.</param>
 <param name="encoding">Text encoding.</param>
 <param name="path">Path to CloudFile.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.WriteAllLines(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes a sequence of lines to a given CloudFile path.
 </summary>
 <param name="lines">Lines to be written.</param>
 <param name="encoding">Text encoding.</param>
 <param name="path">Path to CloudFile.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.WriteAllBytesAsync(System.Byte[],Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Write buffer contents to CloudFile.
 </summary>
 <param name="buffer">Source buffer.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.WriteAllBytes(System.Byte[],Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Write buffer contents to CloudFile.
 </summary>
 <param name="buffer">Source buffer.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.UploadAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Uploads a collection local files to store.
 </summary>
 <param name="localFiles">Local paths to files.</param>
 <param name="targetDirectory">Containing directory in cloud store. Defaults to process default.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.UploadAsync(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Uploads a local file to store.
 </summary>
 <param name="localFile">Local path to file.</param>
 <param name="targetDirectory">Containing directory in cloud store. Defaults to process default.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Upload(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Uploads a collection local files to store.
 </summary>
 <param name="localFiles">Local paths to files.</param>
 <param name="targetDirectory">Containing directory in cloud store. Defaults to process default.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Upload(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Uploads a local file to store.
 </summary>
 <param name="localFile">Local path to file.</param>
 <param name="targetDirectory">Containing directory in cloud store. Defaults to process default.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadLinesAsync(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as a sequence of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadLinesAsync(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as a sequence of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadLines(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as a sequence of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadLines(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as a sequence of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAsync``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Reads file in store with provided deserializer function.
 </summary>
 <param name="file">Input file.</param>
 <param name="deserializer">Deserializer function.</param>
 <param name="leaveOpen">Leave stream open after deserialization. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAsync``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Reads file in store with provided deserializer function.
 </summary>
 <param name="path">Input file.</param>
 <param name="deserializer">Deserializer function.</param>
 <param name="leaveOpen">Leave stream open after deserialization. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllTextAsync(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Dump all file contents to a single string.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllTextAsync(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Dump all file contents to a single string.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllText(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Dump all file contents to a single string.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllText(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Dump all file contents to a single string.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllLinesAsync(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as an array of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllLinesAsync(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as an array of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllLines(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as an array of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllLines(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a file as an array of lines.
 </summary>
 <param name="file">Input file.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllBytesAsync(MBrace.CloudFile)">
 <summary>
     Store all contents of given file to a new byte array.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllBytesAsync(System.String)">
 <summary>
     Store all contents of given file to a new byte array.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllBytes(MBrace.CloudFile)">
 <summary>
     Store all contents of given file to a new byte array.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ReadAllBytes(System.String)">
 <summary>
     Store all contents of given file to a new byte array.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Read``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Reads file in store with provided deserializer function.
 </summary>
 <param name="file">Input file.</param>
 <param name="deserializer">Deserializer function.</param>
 <param name="leaveOpen">Leave stream open after deserialization. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Read``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Reads file in store with provided deserializer function.
 </summary>
 <param name="path">Input file.</param>
 <param name="deserializer">Deserializer function.</param>
 <param name="leaveOpen">Leave stream open after deserialization. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.GetSizeAsync(MBrace.CloudFile)">
 <summary>
     Gets the size of provided file, in bytes.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.GetSizeAsync(System.String)">
 <summary>
     Gets the size of provided file, in bytes.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.GetSize(MBrace.CloudFile)">
 <summary>
     Gets the size of provided file, in bytes.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.GetSize(System.String)">
 <summary>
     Gets the size of provided file, in bytes.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ExistsAsync(MBrace.CloudFile)">
 <summary>
     Checks if file exists in store.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.ExistsAsync(System.String)">
 <summary>
     Checks if file exists in store.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Exists(MBrace.CloudFile)">
 <summary>
     Checks if file exists in store.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Exists(System.String)">
 <summary>
     Checks if file exists in store.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.EnumerateAsync(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Gets all files that exist in given container.
 </summary>
 <param name="directory">Path to directory. Defaults to the process directory.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Enumerate(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Gets all files that exist in given container.
 </summary>
 <param name="directory">Path to directory. Defaults to the process directory.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.DeleteAsync(MBrace.CloudFile)">
 <summary>
     Deletes file in given path.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.DeleteAsync(System.String)">
 <summary>
     Deletes file in given path.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Delete(MBrace.CloudFile)">
 <summary>
     Deletes file in given path.
 </summary>
 <param name="file">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Delete(System.String)">
 <summary>
     Deletes file in given path.
 </summary>
 <param name="path">Input file.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.CreateAsync(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},System.String,System.String)">
 <summary>
     Creates a new file in store with provided serializer function.
 </summary>
 <param name="serializer">Serializer function.</param>
 <param name="directory">Containing directory.</param>
 <param name="fileName">File name.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.CreateAsync(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new file in store with provided serializer function.
 </summary>
 <param name="serializer">Serializer function.</param>
 <param name="path">Path to file. Defaults to auto-generated path.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Create(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},System.String,System.String)">
 <summary>
     Creates a new file in store with provided serializer function.
 </summary>
 <param name="serializer">Serializer function.</param>
 <param name="directory">Containing directory.</param>
 <param name="fileName">File name.</param>
</member>
<member name="M:MBrace.Client.CloudFileClient.Create(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new file in store with provided serializer function.
 </summary>
 <param name="serializer">Serializer function.</param>
 <param name="path">Path to file. Defaults to auto-generated path.</param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.CloudFileClient">
<summary>
 Collection of file store operations
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Client.CloudPathClient.GetRandomDirectoryName">
<summary>
 Generates a random, uniquely specified path to directory
</summary>
</member>
<member name="M:MBrace.Client.CloudPathClient.GetFileName(System.String)">
 <summary>
     Returns the file name for given path.
 </summary>
 <param name="path">Input file path.</param>
</member>
<member name="M:MBrace.Client.CloudPathClient.GetDirectoryName(System.String)">
 <summary>
     Returns the directory name for given path.
 </summary>
 <param name="path">Input file path.</param>
</member>
<member name="M:MBrace.Client.CloudPathClient.Combine(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
     Combines a collection of file names with provided directory prefix.
 </summary>
 <param name="directory">Directory prefix path.</param>
 <param name="fileNames">File names to be combined.</param>
</member>
<member name="M:MBrace.Client.CloudPathClient.Combine(System.String[])">
 <summary>
     Combines an array of paths into a path.
 </summary>
 <param name="paths">Strings to be combined.</param>
</member>
<member name="M:MBrace.Client.CloudPathClient.Combine(System.String,System.String,System.String)">
 <summary>
     Combines three strings into one path.
 </summary>
 <param name="path1">First path.</param>
 <param name="path2">Second path.</param>
 <param name="path3">Third path.</param>
</member>
<member name="M:MBrace.Client.CloudPathClient.Combine(System.String,System.String)">
 <summary>
     Combines two strings into one path.
 </summary>
 <param name="path1">First path.</param>
 <param name="path2">Second path.</param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.CloudPathClient">
<summary>
 Collection of path-related file store methods.
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Client.CloudRefClient.ReadAsync``1(MBrace.CloudCell{``0})">
 <summary>
     Dereference a Cloud cell.
 </summary>
 <param name="cloudCell">CloudCell to be dereferenced.</param>
</member>
<member name="M:MBrace.Client.CloudRefClient.Read``1(MBrace.CloudCell{``0})">
 <summary>
     Dereference a Cloud cell.
 </summary>
 <param name="cloudCell">CloudCell to be dereferenced.</param>
</member>
<member name="M:MBrace.Client.CloudRefClient.ParseAsync``1(System.String,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Parses a cloud cell of given type with provided serializer. If successful, returns the cloud cell instance.
 </summary>
 <param name="path">Path to cloud cell.</param>
 <param name="serializer">Serializer for cloud cell.</param>
</member>
<member name="M:MBrace.Client.CloudRefClient.Parse``1(System.String,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Parses a cloud cell of given type with provided serializer. If successful, returns the cloud cell instance.
 </summary>
 <param name="path">Path to cloud cell.</param>
 <param name="serializer">Serializer for cloud cell.</param>
</member>
<member name="M:MBrace.Client.CloudRefClient.NewAsync``1(``0,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a new cloud cell to the underlying store with provided value.
     Cloud cells are immutable and cached locally for performance.
 </summary>
 <param name="value">Cloud cell value.</param>
 <param name="directory">FileStore directory used for cloud cell. Defaults to execution context setting.</param>
 <param name="serializer">Serializer used for object serialization. Defaults to runtime context.</param>
</member>
<member name="M:MBrace.Client.CloudRefClient.New``1(``0,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a new cloud cell to the underlying store with provided value.
     Cloud cells are immutable and cached locally for performance.
 </summary>
 <param name="value">Cloud cell value.</param>
 <param name="directory">FileStore directory used for cloud cell. Defaults to execution context setting.</param>
 <param name="serializer">Serializer used for object serialization. Defaults to runtime context.</param>
</member>
<member name="M:MBrace.Client.CloudRefClient.CacheAsync``1(MBrace.CloudCell{``0})">
 <summary>
     Cache a cloud cell to local execution context
 </summary>
 <param name="cloudCell">Cloud ref input</param>
</member>
<member name="M:MBrace.Client.CloudRefClient.Cache``1(MBrace.CloudCell{``0})">
 <summary>
     Cache a cloud cell to local execution context
 </summary>
 <param name="cloudCell">Cloud ref input</param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.CloudRefClient">
<summary>
 Collection of CloudCell operations.
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Client.CloudSequenceClient.ParseAsync``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Parses an already existing sequence of given type in provided file store.
 </summary>
 <param name="file">Target cloud file.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.ParseAsync``1(System.String,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Parses an already existing sequence of given type in provided file store.
 </summary>
 <param name="path">Path to Cloud sequence.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.Parse``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Parses an already existing sequence of given type in provided file store.
 </summary>
 <param name="file">Target cloud file.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.Parse``1(System.String,Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Parses an already existing sequence of given type in provided file store.
 </summary>
 <param name="path">Path to Cloud sequence.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.NewPartitionedAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int64,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a collection of Cloud sequences partitioned by file size.
 </summary>
 <param name="values">Input sequence.</param>
 <param name="maxPartitionSize">Maximum size in bytes per Cloud sequence partition.</param>
 <param name="directory"></param>
 <param name="serializer"></param>
 <param name="directory">FileStore directory used for Cloud sequence. Defaults to execution context.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.NewPartitioned``1(System.Collections.Generic.IEnumerable{``0},System.Int64,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a collection of Cloud sequences partitioned by file size.
 </summary>
 <param name="values">Input sequence.</param>
 <param name="maxPartitionSize">Maximum size in bytes per Cloud sequence partition.</param>
 <param name="directory"></param>
 <param name="serializer"></param>
 <param name="directory">FileStore directory used for Cloud sequence. Defaults to execution context.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.NewAsync``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a new Cloud sequence with given values in the underlying store.
     Cloud sequences are cached locally for performance.
 </summary>
 <param name="values">Input sequence.</param>
 <param name="directory">FileStore directory used for Cloud sequence. Defaults to execution context.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.New``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.ISerializer})">
 <summary>
     Creates a new Cloud sequence with given values in the underlying store.
     Cloud sequences are cached locally for performance.
 </summary>
 <param name="values">Input sequence.</param>
 <param name="directory">FileStore directory used for Cloud sequence. Defaults to execution context.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.FromFileAsync``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudSequence from file path with user-provided deserialization function.
 </summary>
 <param name="file">Target cloud file.</param>
 <param name="deserializer">Sequence deserializer function.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.FromFileAsync``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudSequence from file path with user-provided deserialization function.
 </summary>
 <param name="path">Path to file.</param>
 <param name="deserializer">Sequence deserializer function.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.FromFile``1(MBrace.CloudFile,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudSequence from file path with user-provided deserialization function.
 </summary>
 <param name="file">Target cloud file.</param>
 <param name="deserializer">Sequence deserializer function.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="M:MBrace.Client.CloudSequenceClient.FromFile``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudSequence from file path with user-provided deserialization function.
 </summary>
 <param name="path">Path to file.</param>
 <param name="deserializer">Sequence deserializer function.</param>
 <param name="force">Force evaluation. Defaults to false.</param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.CloudSequenceClient">
<summary>
 Collection of CloudCell operations.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Client.FileStoreClient.Path">
<summary>
 CloudFile client.
</summary>
</member>
<member name="P:MBrace.Client.FileStoreClient.File">
<summary>
 CloudFileStore client.
</summary>
</member>
<member name="P:MBrace.Client.FileStoreClient.Directory">
<summary>
 CloudDirectory client.
</summary>
</member>
<member name="M:MBrace.Client.FileStoreClient.CreateFromResources(MBrace.Continuation.ResourceRegistry)">
 <summary>
 Create a new FileStoreClient instance from given resources.
 Resources must contain CloudFileStoreConfiguration value.
 </summary>
 <param name="resources"></param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Client.InMemoryCancellationToken">
<summary>
 Cloud cancellation token implementation that wraps around System.Threading.CancellationToken
</summary>
</member>
<member name="T:MBrace.Client.InMemoryCancellationTokenSource">
<summary>
 Cloud cancellation token source implementation that wraps around System.Threading.CancellationTokenSource
</summary>
</member>
<member name="T:MBrace.Client.InMemoryTask`1">
<summary>
 Cloud task implementation that wraps around System.Threading.Task for inmemory runtimes
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Client.LocalRuntime.StoreClient">
<summary>
 Store client instance for in memory runtime instance.
</summary>
</member>
<member name="M:MBrace.Client.LocalRuntime.RunAsync``1(MBrace.Cloud{``0})">
 <summary>
     Asynchronously executes a cloud computation in the local process,
     with parallelism provided by the .NET thread pool.
 </summary>
 <param name="workflow">Workflow to be executed.</param>
</member>
<member name="M:MBrace.Client.LocalRuntime.Run``1(MBrace.Cloud{``0},System.Threading.CancellationToken)">
 <summary>
     Executes a cloud computation in the local process,
     with parallelism provided by the .NET thread pool.
 </summary>
 <param name="workflow">Workflow to be executed.</param>
 <param name="cancellationToken">Cancellation token passed to computation.</param>
</member>
<member name="M:MBrace.Client.LocalRuntime.Run``1(MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{MBrace.ICloudCancellationToken})">
 <summary>
     Executes a cloud computation in the local process,
     with parallelism provided by the .NET thread pool.
 </summary>
 <param name="workflow">Workflow to be executed.</param>
 <param name="cancellationToken">Cancellation token passed to computation.</param>
</member>
<member name="M:MBrace.Client.LocalRuntime.CreateCancellationTokenSource">
<summary>
 Creates a new cancellation token source
</summary>
</member>
<member name="M:MBrace.Client.LocalRuntime.Create(Microsoft.FSharp.Core.FSharpOption{MBrace.Runtime.ICloudLogger},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.CloudFileStoreConfiguration},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.CloudAtomConfiguration},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.CloudChannelConfiguration},Microsoft.FSharp.Core.FSharpOption{MBrace.Continuation.ResourceRegistry})">
 <summary>
     Creates an InMemory runtime instance with provided store components.
 </summary>
 <param name="workflow">Workflow to be executed.</param>
 <param name="logger">Logger abstraction. Defaults to no logging.</param>
 <param name="fileConfig">File store configuration. Defaults to no file store.</param>
 <param name="atomConfig">Cloud atom configuration. Defaults to in-memory atoms.</param>
 <param name="channelConfig">Cloud channel configuration. Defaults to in-memory channels.</param>
 <param name="resources">Misc resources passed by user to execution context. Defaults to none.</param>
</member>
<member name="M:MBrace.Client.LocalRuntime.Create(MBrace.Continuation.ResourceRegistry)">
 <summary>
     Creates an InMemory runtime instance with provided resources.
 </summary>
 <param name="resources"></param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.LocalRuntime">
<summary>
 Handle for in-memory execution of cloud workflows.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Client.StoreClient.Resources">
<summary>
 Gets the associated ResourceRegistry.
</summary>
</member>
<member name="P:MBrace.Client.StoreClient.FileStore">
<summary>
 CloudFileStore client.
</summary>
</member>
<member name="P:MBrace.Client.StoreClient.CloudSequence">
<summary>
 CloudSequence client.
</summary>
</member>
<member name="P:MBrace.Client.StoreClient.CloudCell">
<summary>
 CloudCell client.
</summary>
</member>
<member name="P:MBrace.Client.StoreClient.Channel">
<summary>
 CloudChannel client.
</summary>
</member>
<member name="P:MBrace.Client.StoreClient.Atom">
<summary>
 CloudAtom client.
</summary>
</member>
<member name="M:MBrace.Client.StoreClient.CreateFromResources(MBrace.Continuation.ResourceRegistry)">
 <summary>
 Create a new StoreClient instance from given resources.
 Resources must contain CloudFileStoreConfiguration value.
 </summary>
 <param name="resources"></param>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.StoreClient">
<summary>
 Common client operations on CloudAtom, CloudChannel and CloudFile primitives.
</summary>
</member>
<member name="">

</member>
<member name="T:MBrace.Client.ClientUtils">

</member>
<member name="M:MBrace.CloudAtomUtils.ICloudAtom`1.Transact``2(MBrace.ICloudAtom{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``1,``0}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Performs transaction on atom.
 </summary>
 <param name="transaction">Transaction function.</param>
 <param name="maxRetries">Maximum retries under optimistic semantics. Defaults to infinite.</param>
</member>
<member name="T:MBrace.CloudAtomUtils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.CloudFileUtils">

</member>
<member name="M:MBrace.CloudOperators.op_LessBarBarGreater``2(MBrace.Cloud{``0},MBrace.Cloud{``1})">
 <summary>
     Combines two cloud computations into one that executes them in parallel.
 </summary>
 <param name="left">The first cloud computation.</param>
 <param name="right">The second cloud computation.</param>
</member>
<member name="T:MBrace.CloudOperators">
<summary>
 collection of parallelism operators for the cloud
</summary>
</member>
<member name="M:MBrace.CloudSequenceModule.cache``1(MBrace.CloudSequence{``0})">
 <summary>
     Cache contents to local execution context. Returns true iff succesful.
 </summary>
 <param name="cseq">Input cloud sequence.</param>
</member>
<member name="M:MBrace.CloudSequenceModule.toArray``1(MBrace.CloudSequence{``0})">
 <summary>
     Fetches all elements of the cloud sequence and returns them as a local array.
 </summary>
 <param name="cseq">Input cloud sequence</param>
</member>
<member name="M:MBrace.CloudSequenceModule.toSeq``1(MBrace.CloudSequence{``0})">
 <summary>
     Returns an enumerable that lazily fetches elements of the cloud sequence from store.
 </summary>
 <param name="cseq">Input cloud sequence</param>
</member>
<member name="T:MBrace.CloudSequenceModule">

</member>
<member name="M:MBrace.Continuation.Cloud.WithNestedResource``2(MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpFunc{``1,``1},Microsoft.FSharp.Core.FSharpFunc{``1,``1})">
 <summary>
     Runs provided workflow in a nested execution context that is
     introduced using the update/revert functions.
     These must be serializable and exception safe.
 </summary>
 <param name="workflow">Workflow to be wrapped.</param>
 <param name="update">Resource updating function.</param>
 <param name="revert">Resource reverting function.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.WithNestedContext``1(MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.ExecutionContext,MBrace.Continuation.ExecutionContext},Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.ExecutionContext,MBrace.Continuation.ExecutionContext})">
 <summary>
     Runs provided workflow in a nested execution context that is
     introduced using the update/revert functions.
     These must be serializable and exception safe.
 </summary>
 <param name="workflow">Workflow to be wrapped.</param>
 <param name="update">Resource updating function.</param>
 <param name="revert">Resource reverting function.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.WithMappedContinuation``3(Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.Continuation{``0},MBrace.Continuation.Continuation{``1}},``2)">
 <summary>
     Wraps a workflow with a mapped continuation.
 </summary>
 <param name="mapper">Continuation mapping function.</param>
 <param name="workflow">Input workflow.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.WithAppendedStackTrace``2(System.String,``0)">
 <summary>
     Appends a function information entry to the symbolic stacktrace in the exception continuation.
 </summary>
 <param name="functionName">Function info string to be appended.</param>
 <param name="workflow">Workflow to be wrapped.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.TryGetResource``1">
 <summary>
     Try Getting resource from current execution context.
 </summary>
</member>
<member name="M:MBrace.Continuation.Cloud.ToAsync``1(MBrace.Cloud{``0},MBrace.Continuation.ResourceRegistry,MBrace.ICloudCancellationToken)">
 <summary>
     Wraps a cloud workflow into an asynchronous workflow.
 </summary>
 <param name="workflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource resolver to be used; defaults to empty resource registry.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.StartWithContinuations``1(MBrace.Cloud{``0},MBrace.Continuation.Continuation{``0},MBrace.Continuation.ResourceRegistry,MBrace.ICloudCancellationToken)">
 <summary>
     Starts a cloud workflow with given execution context in the current thread.
 </summary>
 <param name="workflow">Cloud workflow to be executed.</param>
 <param name="continuation">Root continuation for workflow.</param>
 <param name="resources">Resource registry for workflow.</param>
 <param name="cancellationToken">Cancellation token for workflow.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.StartWithContinuations``1(MBrace.Cloud{``0},MBrace.Continuation.Continuation{``0},MBrace.Continuation.ExecutionContext)">
 <summary>
     Starts a cloud workflow with given execution context in the current thread.
 </summary>
 <param name="workflow">Cloud workflow to be executed.</param>
 <param name="continuation">Root continuation for workflow.</param>
 <param name="context">Local execution context.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.StartImmediate(MBrace.Cloud{Microsoft.FSharp.Core.Unit},MBrace.Continuation.ResourceRegistry,MBrace.ICloudCancellationToken)">
 <summary>
     Starts provided cloud workflow immediately in the current thread.
 </summary>
 <param name="workflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource registry passed to execution context.</param>
 <param name="cancellationToken">Local Cancellation token.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.StartAsTask``1(MBrace.Cloud{``0},MBrace.Continuation.ResourceRegistry,MBrace.ICloudCancellationToken,Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions})">
 <summary>
     Starts given workflow as a System.Threading.Task
 </summary>
 <param name="workflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource registry used with workflows.</param>
 <param name="taskCreationOptions">Resource registry used with workflows.</param>
 <param name="cancellationToken">Cancellation token.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.Start(MBrace.Cloud{Microsoft.FSharp.Core.Unit},MBrace.Continuation.ResourceRegistry,MBrace.ICloudCancellationToken)">
 <summary>
     Starts provided cloud workflow in the thread pool.
 </summary>
 <param name="workflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource registry passed to execution context.</param>
 <param name="cancellationToken">Local Cancellation token.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.RunSynchronously``1(MBrace.Cloud{``0},MBrace.Continuation.ResourceRegistry,MBrace.ICloudCancellationToken)">
 <summary>
     Synchronously await a locally executing workflow.
 </summary>
 <param name="workflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource resolver to be used; defaults to no resources.</param>
 <param name="cancellationToken">Cancellation token to be used.</param>
</member>
<member name="M:MBrace.Continuation.Cloud.GetResourceRegistry">
 <summary>
     Returns the resource registry for current execution context.
 </summary>
</member>
<member name="M:MBrace.Continuation.Cloud.GetResource``1">
 <summary>
     Gets resource from current execution context.
 </summary>
</member>
<member name="M:MBrace.Continuation.Cloud.GetExecutionContext">
 <summary>
     Returns the execution context of current computation.
 </summary>
</member>
<member name="M:MBrace.Continuation.Cloud.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.ExecutionContext,Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.Continuation{``0},Microsoft.FSharp.Core.Unit}})">
 <summary>
     Creates a cloud workflow that captures the current execution context.
 </summary>
 <param name="body">Execution body.</param>
</member>
<member name="T:MBrace.Continuation.Cloud">
<summary>
 Intrinsic cloud workflow combinators
</summary>
</member>
<member name="P:MBrace.Continuation.Continuation`1.Cancellation">
<summary>
 Cancellation continuation
</summary>
</member>
<member name="P:MBrace.Continuation.Continuation`1.Exception">
<summary>
 Exception continuation
</summary>
</member>
<member name="P:MBrace.Continuation.Continuation`1.Success">
<summary>
 Success continuation
</summary>
</member>
<member name="T:MBrace.Continuation.Continuation`1">
<summary>
 Distributable continuation context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfo.Reify(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Returns contained exception with restored stacktrace state.
     This operation mutates exception contents, so should be used with care.
 </summary>
 <param name="useSeparator">Add a separator after remote stacktrace. Defaults to true.</param>
 <param name="prepareForRaise">Prepare exception state for raise. Defaults to false.</param>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfo.Capture(System.Exception)">
 <summary>
     Captures the provided exception stacktrace into an ExceptionDispatchInfo instance.
 </summary>
 <param name="exn">Captured exception</param>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfo.AppendToStackTrace(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
     Creates a new ExceptionDispatchInfo instance with line appended to stacktrace.
 </summary>
 <param name="line">Line to be appended.</param>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfo.AppendToStackTrace(System.String)">
 <summary>
     Creates a new ExceptionDispatchInfo instance with line appended to stacktrace.
 </summary>
 <param name="line">Line to be appended.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Continuation.ExceptionDispatchInfo">
<summary>
 Replacement for System.Runtime.ExceptionServices.ExceptionDispatchInfo
 that is serializable and permits symbolic appending to stacktrace
</summary>
</member>
<member name="P:MBrace.Continuation.ExecutionContext.Resources">
<summary>
 Runtime cloud resource resolver
</summary>
</member>
<member name="P:MBrace.Continuation.ExecutionContext.CancellationToken">
<summary>
 Cloud cancellation token of the current context
</summary>
</member>
<member name="M:MBrace.Continuation.ExecutionContext.Empty(MBrace.ICloudCancellationToken)">
 <summary>
     Initializes an empty execution context.  
 </summary>
 <param name="cancellationToken">Optional cancellation token.</param>
</member>
<member name="T:MBrace.Continuation.ExecutionContext">
<summary>
 Local, non-distributable continuation execution context.
</summary>
</member>
<member name="M:MBrace.Continuation.Local.WithNestedResource``2(MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpFunc{``1,``1},Microsoft.FSharp.Core.FSharpFunc{``1,``1})">
 <summary>
     Runs provided workflow in a nested execution context that is
     introduced using the update/revert functions.
     These must be serializable and exception safe.
 </summary>
 <param name="workflow">Workflow to be wrapped.</param>
 <param name="update">Resource updating function.</param>
 <param name="revert">Resource reverting function.</param>
</member>
<member name="M:MBrace.Continuation.Local.WithNestedContext``1(MBrace.Local{``0},Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.ExecutionContext,MBrace.Continuation.ExecutionContext},Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.ExecutionContext,MBrace.Continuation.ExecutionContext})">
 <summary>
     Runs provided workflow in a nested execution context that is
     introduced using the update/revert functions.
     These must be serializable and exception safe.
 </summary>
 <param name="workflow">Workflow to be wrapped.</param>
 <param name="update">Resource updating function.</param>
 <param name="revert">Resource reverting function.</param>
</member>
<member name="M:MBrace.Continuation.Local.WithMappedContinuation``2(Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.Continuation{``0},MBrace.Continuation.Continuation{``1}},MBrace.Local{``1})">
 <summary>
     Wraps a workflow with a mapped continuation.
 </summary>
 <param name="mapper">Continuation mapping function.</param>
 <param name="workflow">Input workflow.</param>
</member>
<member name="M:MBrace.Continuation.Local.WithAppendedStackTrace``1(System.String,MBrace.Local{``0})">
 <summary>
     Appends a function information entry to the symbolic stacktrace in the exception continuation.
 </summary>
 <param name="functionName">Function info string to be appended.</param>
 <param name="workflow">Workflow to be wrapped.</param>
</member>
<member name="M:MBrace.Continuation.Local.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.ExecutionContext,Microsoft.FSharp.Core.FSharpFunc{MBrace.Continuation.Continuation{``0},Microsoft.FSharp.Core.Unit}})">
 <summary>
     Creates a cloud workflow that captures the current execution context.
 </summary>
 <param name="body">Execution body.</param>
</member>
<member name="T:MBrace.Continuation.Local">
<summary>
 Intrinsic local workflow combinators
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Continuation.ResourceNotFoundException">
<summary>
 Exception raised on missing resource resolution
</summary>
</member>
<member name="">

</member>
<member name="P:MBrace.Continuation.ResourceRegistry.InstalledResources">
<summary>
 Gets all resources currently registered with factory.
</summary>
</member>
<member name="">

</member>
<member name="P:MBrace.Continuation.ResourceRegistry.Empty">
<summary>
 Creates an empty resource container
</summary>
</member>
<member name="M:MBrace.Continuation.ResourceRegistry.TryResolve``1">
<summary>
 Try Resolving resource of given type
</summary>
</member>
<member name="M:MBrace.Continuation.ResourceRegistry.Resolve``1">
<summary>
 Resolves resource of given type
</summary>
</member>
<member name="M:MBrace.Continuation.ResourceRegistry.Remove``1">
 <summary>
     Creates a new resource registry by removing resource of given key.
 </summary>
</member>
<member name="M:MBrace.Continuation.ResourceRegistry.Register``1(``0)">
 <summary>
     Creates a new resource registry by appending provided resource.
     Any existing resources of the same type will be overwritten.
 </summary>
 <param name="resource">input resource.</param>
</member>
<member name="M:MBrace.Continuation.ResourceRegistry.Contains``1">
<summary>
 Returns true iff registry instance contains resource of given type
</summary>
</member>
<member name="M:MBrace.Continuation.ResourceRegistry.Combine(System.Collections.Generic.IEnumerable{MBrace.Continuation.ResourceRegistry})">
 <summary>
     Combines two resource registries into one.
 </summary>
 <param name="resources">Resources to be combined.</param>
</member>
<member name="M:MBrace.Continuation.ResourceRegistry.Combine(MBrace.Continuation.ResourceRegistry,MBrace.Continuation.ResourceRegistry)">
 <summary>
     Combines two resource registries into one.
 </summary>
 <param name="resources1">First resource registry.</param>
 <param name="resources2">Second resource registry.</param>
</member>
<member name="">

</member>
<member name="T:MBrace.Continuation.ResourceRegistry">
<summary>
 Immutable dependency container used for pushing
 runtime resources to the continuation monad.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Continuation.Trampoline.Reset">
<summary>
 Resets the trampoline state in the current thread.
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Continuation.Trampoline.QueueWorkItem(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Queue a new work item to the .NET thread pool.
</summary>
</member>
<member name="M:MBrace.Continuation.Trampoline.IsBindThresholdReached">
<summary>
 Checks if continuation execution stack has reached specified threshold in the current thread.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Continuation.Trampoline">
<summary>
 Mechanism for offloading execution stack in the thread pool
</summary>
</member>
<member name="M:MBrace.Continuation.Continuation.choice``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,System.Exception}},MBrace.Continuation.Continuation{``1})">
 <summary>
     Contravariant Continuation choice combinator.
 </summary>
 <param name="f">Choice function.</param>
 <param name="tcont">Initial continuation.</param>
</member>
<member name="M:MBrace.Continuation.Continuation.failwith``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Exception},MBrace.Continuation.Continuation{``1})">
 <summary>
     Contravariant failure combinator
 </summary>
 <param name="f">Mapper function.</param>
 <param name="tcont">Initial continuation.</param>
</member>
<member name="M:MBrace.Continuation.Continuation.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},MBrace.Continuation.Continuation{``1})">
 <summary>
     Contravariant Continuation map combinator.
 </summary>
 <param name="f">Mapper function.</param>
 <param name="tcont">Initial continuation.</param>
</member>
<member name="T:MBrace.Continuation.Continuation">
<summary>
 Continuation utility functions
</summary>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfoModule.raiseWithCurrentStackTrace``2(System.Boolean,``0)">
 <summary>
     Immediately raises exception instance, preserving its current stacktrace
 </summary>
 <param name="useSeparator">Appends a stacktrace separator after the remote stacktrace.</param>
 <param name="exn">Input exception.</param>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfoModule.raise``1(System.Boolean,MBrace.Continuation.ExceptionDispatchInfo)">
 <summary>
     Raise provided exception dispatch info.
 </summary>
 <param name="useSeparator">Appends a stacktrace separator after the remote stacktrace.</param>
 <param name="edi">Exception dispatch info to be raised.</param>
</member>
<member name="T:MBrace.Continuation.ExceptionDispatchInfoModule">

</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfoUtils.Async.RunSync``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>
     Runs the asynchronous computation and awaits its result.
     Preserves original stacktrace for any exception raised.
 </summary>
 <param name="workflow">Workflow to be run.</param>
 <param name="cancellationToken">Optioncal cancellation token.</param>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfoUtils.Async.Raise``1(System.Exception)">
 <summary>
     Efficiently reraise exception, without losing its existing stacktrace.
 </summary>
 <param name="e"></param>
</member>
<member name="">

</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfoUtils.Task`1.AwaitResultAsync``1(System.Threading.Tasks.Task{``0})">
<summary>
 Asynchronously awaits task completion
</summary>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfoUtils.Task`1.GetResult``1(System.Threading.Tasks.Task{``0})">
<summary>
 Returns the task result
</summary>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfoUtils.Task`1.TryGetResult``1(System.Threading.Tasks.Task{``0})">
 <summary>
     Returns Some result if completed, None if pending, exception if faulted.
 </summary>
</member>
<member name="M:MBrace.Continuation.ExceptionDispatchInfoUtils.Task`1.get_InnerException``1(System.Threading.Tasks.Task{``0})">
<summary>
 Returns the inner exception of the faulted task.
</summary>
</member>
<member name="T:MBrace.Continuation.ExceptionDispatchInfoUtils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Continuation.ResourceBuilder.resource">
<summary>
 resource registry builder
</summary>
</member>
<member name="T:MBrace.Continuation.ResourceBuilder">
<summary>
 Resource registry builder API
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Continuation.ResourceRegistryUtils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Runtime.ConsoleLogger">
<summary>
 A logger that writes to the system console
</summary>
</member>
<member name="M:MBrace.Runtime.ICloudLogger.Log(System.String)">
 <summary>
     Log a new message to the execution context.
 </summary>
 <param name="entry">Entry to be logged.</param>
</member>
<member name="T:MBrace.Runtime.ICloudLogger">
 <summary>
     Cloud Workflow logger.
 </summary>
</member>
<member name="P:MBrace.Runtime.IDistributionProvider.ProcessId">
<summary>
 Get cloud process identifier
</summary>
</member>
<member name="P:MBrace.Runtime.IDistributionProvider.Logger">
<summary>
 Gets the current logger instance.
</summary>
</member>
<member name="P:MBrace.Runtime.IDistributionProvider.JobId">
<summary>
 Get cloud job identifier
</summary>
</member>
<member name="P:MBrace.Runtime.IDistributionProvider.IsTargetedWorkerSupported">
<summary>
 Specifies whether runtime supports submission of tasks to specific worker nodes
</summary>
</member>
<member name="P:MBrace.Runtime.IDistributionProvider.IsForcedLocalParallelismEnabled">
<summary>
 Specifies whether runtime will evaluate all parallelism primitives using threadpool semantics 
</summary>
</member>
<member name="P:MBrace.Runtime.IDistributionProvider.FaultPolicy">
 <summary>
     Gets the current fault policy.
 </summary>
</member>
<member name="P:MBrace.Runtime.IDistributionProvider.CurrentWorker">
<summary>
 Gets currently running worker
</summary>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.WithForcedLocalParallelismSetting(System.Boolean)">
 <summary>
     Creates a new distribution provider instance with toggled local parallelism semantics
 </summary>
 <param name="localParallelismEnabled">With local parallelism enabled or disabled.</param>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.WithFaultPolicy(MBrace.FaultPolicy)">
 <summary>
     Creates a new scheduler instance with updated fault policy.
 </summary>
 <param name="newPolicy">new fault policy.</param>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.ScheduleStartAsTask``1(MBrace.Cloud{``0},MBrace.FaultPolicy,MBrace.ICloudCancellationToken,Microsoft.FSharp.Core.FSharpOption{MBrace.IWorkerRef})">
 <summary>
     Start a new computation as a cloud task. 
 </summary>
 <param name="workflow">Workflow to be executed.</param>
 <param name="faultPolicy">Fault policy for new task.</param>
 <param name="cancellationToken">Cancellation token for task. Defaults to no cancellation token.</param>
 <param name="target">Explicitly specify a target worker for execution.</param>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.ScheduleParallel``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,Microsoft.FSharp.Core.FSharpOption{MBrace.IWorkerRef}}})">
 <summary>
     Parallel fork/join implementation.
 </summary>
 <param name="computations">Computations to be executed. Contains optional target worker.</param>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.ScheduleLocalParallel``1(System.Collections.Generic.IEnumerable{MBrace.Local{``0}})">
 <summary>
     Parallel fork/join implementation.
 </summary>
 <param name="computations">Computations to be executed. Contains optional target worker.</param>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.ScheduleLocalChoice``1(System.Collections.Generic.IEnumerable{MBrace.Local{Microsoft.FSharp.Core.FSharpOption{``0}}})">
 <summary>
     Parallel nondeterministic choice implementation.
 </summary>
 <param name="computations">Computations to be executed. Contains optional target worker.</param>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.ScheduleChoice``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,Microsoft.FSharp.Core.FSharpOption{MBrace.IWorkerRef}}})">
 <summary>
     Parallel nondeterministic choice implementation.
 </summary>
 <param name="computations">Computations to be executed. Contains optional target worker.</param>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.GetAvailableWorkers">
<summary>
 Get all available workers in cluster
</summary>
</member>
<member name="M:MBrace.Runtime.IDistributionProvider.CreateLinkedCancellationTokenSource(MBrace.ICloudCancellationToken[])">
 <summary>
     Creates a linked cancellation token source given collection of cloud cancellation tokens.
 </summary>
 <param name="parents">Parent cancellation tokens.</param>
</member>
<member name="T:MBrace.Runtime.IDistributionProvider">
 <summary>
     Executing runtime abstraction.
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Runtime.NullLogger">
<summary>
 A logger that performs no action
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Runtime.InMemory.InMemoryCancellationToken.LocalToken">
<summary>
 Local System.Threading.CancellationToken instance
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Runtime.InMemory.InMemoryCancellationToken">
<summary>
 Cloud cancellation token implementation that wraps around System.Threading.CancellationToken
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Runtime.InMemory.InMemoryCancellationTokenSource.Token">
<summary>
 InMemoryCancellationToken instance
</summary>
</member>
<member name="P:MBrace.Runtime.InMemory.InMemoryCancellationTokenSource.LocalCancellationTokenSource">
<summary>
 Local System.Threading.CancellationTokenSource instance
</summary>
</member>
<member name="M:MBrace.Runtime.InMemory.InMemoryCancellationTokenSource.CreateLinkedCancellationTokenSource(MBrace.ICloudCancellationToken[])">
 <summary>
     Creates a local linked cancellation token source from provided parent tokens
 </summary>
 <param name="parents">Parent cancellation tokens.</param>
</member>
<member name="">

</member>
<member name="M:MBrace.Runtime.InMemory.InMemoryCancellationTokenSource.Cancel">
<summary>
 Trigger cancelation for the cts
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Runtime.InMemory.InMemoryCancellationTokenSource">
<summary>
 Cloud cancellation token source implementation that wraps around System.Threading.CancellationTokenSource
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Runtime.InMemory.InMemoryChannelProvider">
<summary>
 Defines an in-memory channel factory using mailbox processor
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Runtime.InMemory.InMemoryTask`1">
<summary>
 Cloud task implementation that wraps around System.Threading.Task for inmemory runtimes
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Runtime.InMemory.ThreadPool.Parallel``2(Microsoft.FSharp.Core.FSharpFunc{MBrace.ICloudCancellationToken,MBrace.ICloudCancellationTokenSource},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     A Cloud.Parallel implementation executed using the thread pool.
 </summary>
 <param name="mkNestedCts">Creates a child cancellation token source for child workflows.</param>
 <param name="computations">Input computations.</param>
</member>
<member name="M:MBrace.Runtime.InMemory.ThreadPool.Choice``2(Microsoft.FSharp.Core.FSharpFunc{MBrace.ICloudCancellationToken,MBrace.ICloudCancellationTokenSource},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     A Cloud.Choice implementation executed using the thread pool.
 </summary>
 <param name="mkNestedCts">Creates a child cancellation token source for child workflows.</param>
 <param name="computations">Input computations.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Runtime.InMemory.ThreadPool">
<summary>
 Collection of workflows that provide parallelism
 using the .NET thread pool
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Runtime.InMemory.ThreadPoolRuntime.Create(Microsoft.FSharp.Core.FSharpOption{MBrace.Runtime.ICloudLogger},Microsoft.FSharp.Core.FSharpOption{MBrace.FaultPolicy})">
 <summary>
     Creates a new threadpool runtime instance.
 </summary>
 <param name="logger">Logger for runtime. Defaults to no logging.</param>
 <param name="faultPolicy">Fault policy for runtime. Defaults to no retry.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Runtime.InMemory.ThreadPoolRuntime">
<summary>
 .NET ThreadPool distribution provider
</summary>
</member>
<member name="P:MBrace.Store.CloudAtomConfiguration.DefaultContainer">
<summary>
 Default container for instance in current execution context.
</summary>
</member>
<member name="P:MBrace.Store.CloudAtomConfiguration.AtomProvider">
<summary>
 Atom provider instance
</summary>
</member>
<member name="M:MBrace.Store.CloudAtomConfiguration.Create(MBrace.Store.ICloudAtomProvider,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates an atom configuration instance using provided components.
 </summary>
 <param name="atomProvider">Atom provider instance.</param>
 <param name="defaultContainer">Default container for current process. Defaults to auto generated.</param>
</member>
<member name="T:MBrace.Store.CloudAtomConfiguration">
<summary>
 Atom configuration passed to the continuation execution context
</summary>
</member>
<member name="P:MBrace.Store.CloudChannelConfiguration.DefaultContainer">
<summary>
 Default container for instance in current execution context.
</summary>
</member>
<member name="P:MBrace.Store.CloudChannelConfiguration.ChannelProvider">
<summary>
 Atom provider instance
</summary>
</member>
<member name="M:MBrace.Store.CloudChannelConfiguration.Create(MBrace.Store.ICloudChannelProvider,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a channel configuration instance using provided components.
 </summary>
 <param name="channelProvider">Channel provider instance.</param>
 <param name="defaultContainer">Default container for current process. Defaults to auto generated.</param>
</member>
<member name="T:MBrace.Store.CloudChannelConfiguration">
<summary>
 Channel configuration passed to the continuation execution context
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MBrace.Store.CloudFileStoreConfiguration.DefaultDirectory">
<summary>
 Default directory used by current execution context.
</summary>
</member>
<member name="P:MBrace.Store.CloudFileStoreConfiguration.FileStore">
<summary>
 File store.
</summary>
</member>
<member name="M:MBrace.Store.CloudFileStoreConfiguration.Create(MBrace.Store.ICloudFileStore,MBrace.Store.ISerializer,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{MBrace.Store.IObjectCache})">
 <summary>
     Creates a store configuration instance using provided components.
 </summary>
 <param name="fileStore">File store instance.</param>
 <param name="serializer">Serializer instance.</param>
 <param name="defaultDirectory">Default directory for current process. Defaults to auto generated.</param>
 <param name="cache">Object cache. Defaults to no cache.</param>
</member>
<member name="T:MBrace.Store.CloudFileStoreConfiguration">
<summary>
 Store configuration passed to the continuation execution context
</summary>
</member>
<member name="P:MBrace.Store.ICloudAtomProvider.Name">
<summary>
 Implementation name
</summary>
</member>
<member name="P:MBrace.Store.ICloudAtomProvider.Id">
<summary>
 Cloud atom identifier
</summary>
</member>
<member name="M:MBrace.Store.ICloudAtomProvider.IsSupportedValue``1(``0)">
 <summary>
     Checks if provided value is supported in atom instances.
 </summary>
 <param name="value">Value to be checked.</param>
</member>
<member name="M:MBrace.Store.ICloudAtomProvider.DisposeContainer(System.String)">
 <summary>
     Disposes all atoms in provided container
 </summary>
 <param name="container">Atom container.</param>
</member>
<member name="M:MBrace.Store.ICloudAtomProvider.CreateUniqueContainerName">
<summary>
 Create a uniquely specified container name.
</summary>
</member>
<member name="M:MBrace.Store.ICloudAtomProvider.CreateAtom``1(System.String,``0)">
 <summary>
     Creates a new atom instance with given initial value.
 </summary>
 <param name="container">Atom container.</param>
 <param name="initValue"></param>
</member>
<member name="T:MBrace.Store.ICloudAtomProvider">
<summary>
 Defines a factory for distributed atoms
</summary>
</member>
<member name="P:MBrace.Store.ICloudChannelProvider.Name">
<summary>
 Implementation name
</summary>
</member>
<member name="P:MBrace.Store.ICloudChannelProvider.Id">
<summary>
 unique cloud channel source identifier
</summary>
</member>
<member name="M:MBrace.Store.ICloudChannelProvider.DisposeContainer(System.String)">
 <summary>
     Disposes all atoms in provided container
 </summary>
 <param name="container">Atom container.</param>
</member>
<member name="M:MBrace.Store.ICloudChannelProvider.CreateUniqueContainerName">
<summary>
 Create a uniquely specified container name.
</summary>
</member>
<member name="M:MBrace.Store.ICloudChannelProvider.CreateChannel``1(System.String)">
 <summary>
     Creates a new channel instance for given type.
 </summary>
 <param name="container">Container for channel.</param>
</member>
<member name="T:MBrace.Store.ICloudChannelProvider">
<summary>
 Defines a factory for distributed channels
</summary>
</member>
<member name="P:MBrace.Store.ICloudFileStore.Name">
<summary>
 Implementation name
</summary>
</member>
<member name="P:MBrace.Store.ICloudFileStore.Id">
<summary>
 Store identifier
</summary>
</member>
<member name="M:MBrace.Store.ICloudFileStore.Write``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary>
     Creates a new file in store. If successful returns a writing stream.
 </summary>
 <param name="path">Path to new file.</param>
 <param name="writer">Asynchronous writer function.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.TryGetFullPath(System.String)">
 <summary>
     Returns a normal form for path. Returns None if invalid format.
 </summary>
 <param name="path">Input filepath.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.ToStream(System.String,System.IO.Stream)">
 <summary>
     Reads an existing file to target stream.
 </summary>
 <param name="sourceFile">Source file.</param>
 <param name="target">Target stream.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.OfStream(System.IO.Stream,System.String)">
 <summary>
     Creates a new file from provided stream.
 </summary>
 <param name="targetFile">Target file.</param>
 <param name="source">Source stream.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.GetRootDirectory">
<summary>
 Returns the root directory for cloud store instance.
</summary>
</member>
<member name="M:MBrace.Store.ICloudFileStore.GetRandomDirectoryName">
<summary>
 Generates a random, uniquely specified path to directory
</summary>
</member>
<member name="M:MBrace.Store.ICloudFileStore.GetFileSize(System.String)">
 <summary>
     Returns the file size in bytes.
 </summary>
 <param name="path">Path to file.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.GetFileName(System.String)">
 <summary>
     Returns the file name for given path.
 </summary>
 <param name="path">Input file path.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.GetDirectoryName(System.String)">
 <summary>
     Returns the directory name for given path.
 </summary>
 <param name="path">Input file path.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.FileExists(System.String)">
 <summary>
     Checks if file exists in store.
 </summary>
 <param name="path">Path to file.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.EnumerateFiles(System.String)">
 <summary>
     Gets all files that exist in given container.
 </summary>
 <param name="directory">Path to directory.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.EnumerateDirectories(System.String)">
 <summary>
     Get all directories that exist in given directory.
 </summary>
 <param name="directory">Directory to enumerate.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.DirectoryExists(System.String)">
 <summary>
     Checks if directory exists in given path.
 </summary>
 <param name="directory">Path to directory.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.DeleteFile(System.String)">
 <summary>
     Deletes file in given path.
 </summary>
 <param name="path">File path.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.DeleteDirectory(System.String,System.Boolean)">
 <summary>
     Deletes provided directory.
 </summary>
 <param name="directory">file container.</param>
 <param name="recursive">Delete recursively.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.CreateDirectory(System.String)">
 <summary>
     Creates a new directory in store.
 </summary>
 <param name="directory">Path to directory</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.Combine(System.String[])">
 <summary>
     Combines an array of paths into a path.
 </summary>
 <param name="paths">Strings to be combined.</param>
</member>
<member name="M:MBrace.Store.ICloudFileStore.BeginRead(System.String)">
 <summary>
     Reads from an existing file in store. If successful returns a reading stream.
 </summary>
 <param name="path">Path to existing file.</param>
</member>
<member name="T:MBrace.Store.ICloudFileStore">
<summary>
 Cloud file storage abstraction
</summary>
</member>
<member name="P:MBrace.Store.ICloudStorageEntity.Type">
<summary>
 Type identifier for entity
</summary>
</member>
<member name="P:MBrace.Store.ICloudStorageEntity.Id">
<summary>
 Entity unique identifier
</summary>
</member>
<member name="T:MBrace.Store.ICloudStorageEntity">
<summary>
 Cloud storage entity identifier
</summary>
</member>
<member name="M:MBrace.Store.IObjectCache.TryFind(System.String)">
 <summary>
     Attempt to recover value of given type from cache.
 </summary>
 <param name="key"></param>
</member>
<member name="M:MBrace.Store.IObjectCache.ContainsKey(System.String)">
 <summary>
     Returns true iff key is contained in cache.
 </summary>
 <param name="key"></param>
</member>
<member name="M:MBrace.Store.IObjectCache.Add(System.String,System.Object)">
 <summary>
     Adds a key/value pair to cache.
 </summary>
 <param name="key"></param>
 <param name="value"></param>
</member>
<member name="T:MBrace.Store.IObjectCache">
<summary>
 Object caching abstraction
</summary>
</member>
<member name="P:MBrace.Store.ISerializer.Id">
<summary>
 Serializer identifier
</summary>
</member>
<member name="M:MBrace.Store.ISerializer.Serialize``1(System.IO.Stream,``0,System.Boolean)">
 <summary>
     Serializes a value to stream.
 </summary>
 <param name="target">Target stream.</param>
 <param name="value">Input value.</param>
</member>
<member name="M:MBrace.Store.ISerializer.SeqSerialize``1(System.IO.Stream,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
 <summary>
     Lazily serializes a sequence to stream.
 </summary>
 <param name="target">Target stream.</param>
 <param name="values">Input sequence.</param>
 <returns>Serialized element count.</returns>
</member>
<member name="M:MBrace.Store.ISerializer.SeqDeserialize``1(System.IO.Stream,System.Boolean)">
 <summary>
     Lazily deserialize a sequence from stream.
 </summary>
 <param name="source">Source stream.</param>
</member>
<member name="M:MBrace.Store.ISerializer.Deserialize``1(System.IO.Stream,System.Boolean)">
 <summary>
     Deserializes a value from stream.
 </summary>
 <param name="source">Source stream.</param>
</member>
<member name="T:MBrace.Store.ISerializer">
<summary>
 Serialization abstraction
</summary>
</member>
<member name="M:MBrace.Store.CloudFileStoreUtils.ICloudFileStore.Combine(MBrace.Store.ICloudFileStore,System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
     Combines a collection of file names with a given path prefix.
 </summary>
 <param name="container">Path prefix.</param>
 <param name="fileNames">File name collections.</param>
</member>
<member name="M:MBrace.Store.CloudFileStoreUtils.ICloudFileStore.Combine(MBrace.Store.ICloudFileStore,System.String,System.String,System.String)">
<summary>
 Combines two strings into a single path.
</summary>
</member>
<member name="M:MBrace.Store.CloudFileStoreUtils.ICloudFileStore.Combine(MBrace.Store.ICloudFileStore,System.String,System.String)">
<summary>
 Combines two strings into a single path.
</summary>
</member>
<member name="M:MBrace.Store.CloudFileStoreUtils.ICloudFileStore.EnumerateRootDirectories(MBrace.Store.ICloudFileStore)">
<summary>
 Enumerate all directories inside root folder.
</summary>
</member>
<member name="M:MBrace.Store.CloudFileStoreUtils.ICloudFileStore.GetRandomFilePath(MBrace.Store.ICloudFileStore,System.String)">
 <summary>
     Generates a random path in provided directory.
 </summary>
 <param name="directory">Container directory.</param>
</member>
<member name="M:MBrace.Store.CloudFileStoreUtils.ICloudFileStore.Read``1(MBrace.Store.ICloudFileStore,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},System.String)">
 <summary>
     Reads file in store with provided deserializer function.
 </summary>
 <param name="deserializer">Deserializer function.</param>
 <param name="path">Path to file.</param>
</member>
<member name="T:MBrace.Store.CloudFileStoreUtils">

</member>
<member name="M:MBrace.Store.SerializerUtils.ISerializer.UnPickle``1(MBrace.Store.ISerializer,System.Byte[])">
 <summary>
     Deserializes value from byte array.
 </summary>
 <param name="pickle">Input serialization</param>
</member>
<member name="M:MBrace.Store.SerializerUtils.ISerializer.Pickle``1(MBrace.Store.ISerializer,``0)">
 <summary>
     Serializes value to byte array
 </summary>
 <param name="value">Input value.</param>
</member>
<member name="T:MBrace.Store.SerializerUtils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Utils.Task`1.TryWithTimeout``1(System.Threading.Tasks.Task{``0},System.Int32)">
 <summary>
     Create a new task that times out after a given amount of milliseconds.
 </summary>
 <param name="timeoutMilliseconds">Timeout in milliseconds.</param>
</member>
<member name="M:MBrace.Utils.Task`1.WithTimeout``1(System.Threading.Tasks.Task{``0},System.Int32)">
 <summary>
     Create a new task that times out after a given amount of milliseconds.
 </summary>
 <param name="timeoutMilliseconds">Timeout in milliseconds.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MBrace.Utils.Array.splitWeighted``1(System.Int32[],``0[])">
 <summary>
     Partitions an array into chunks according to a weighted array.
 </summary>
 <param name="weights">Weights for each chunk.</param>
 <param name="input">Input array.</param>
</member>
<member name="M:MBrace.Utils.Array.splitByChunkSize``1(System.Int32,``0[])">
 <summary>
     partitions an array into chunks of given size.
 </summary>
 <param name="chunkSize">chunk size.</param>
 <param name="input">Input array.</param>
</member>
<member name="M:MBrace.Utils.Array.splitByPartitionCount``1(System.Int32,``0[])">
 <summary>
     partitions an array into a predetermined number of uniformly sized chunks.
 </summary>
 <param name="partitions">number of partitions.</param>
 <param name="input">Input array.</param>
</member>
<member name="T:MBrace.Utils.Array">

</member>
<member name="T:MBrace.Utils">

</member>
<member name="M:MBrace.WorkerRef.partitionWeighted``1(MBrace.IWorkerRef[],``0[])">
<summary>
 partitions a set of inputs to workers -- weighted by worker processor count.
</summary>
</member>
<member name="M:MBrace.WorkerRef.partition``1(MBrace.IWorkerRef[],``0[])">
<summary>
 partitions a set of inputs to workers
</summary>
</member>
<member name="T:MBrace.WorkerRef">

</member>
<member name="M:MBrace.Workflows.Cloud.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},MBrace.Cloud{``0})">
 <summary>
     Cloud workflow map combinator.
 </summary>
 <param name="mapper">Mapping function.</param>
 <param name="tworkflow">Input workflow.</param>
</member>
<member name="M:MBrace.Workflows.Cloud.lift2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,``1)">
 <summary>
     Lifts function to cloud workflow.
 </summary>
 <param name="f">Input function</param>
</member>
<member name="M:MBrace.Workflows.Cloud.lift``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
 <summary>
     Lifts function to cloud workflow.
 </summary>
 <param name="f">Input function</param>
</member>
<member name="M:MBrace.Workflows.Cloud.ret``1(``0)">
 <summary>
     Embeds a value in cloud workflow.
 </summary>
 <param name="t">Value to be embedded.</param>
</member>
<member name="T:MBrace.Workflows.Cloud">

</member>
<member name="M:MBrace.Workflows.DivideAndConquer.tryFind2``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed tryFind combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="predicate">Predicate function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.tryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{System.Boolean}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed tryFind combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="predicate">Predicate function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.tryPick2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed tryPick combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="chooser">Chooser function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.tryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{Microsoft.FSharp.Core.FSharpOption{``1}}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed tryPick combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="chooser">Chooser function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.search``2(Microsoft.FSharp.Core.FSharpFunc{``0[],MBrace.Local{Microsoft.FSharp.Core.FSharpOption{``1}}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed search combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="chooser">Chooser function acting on partition.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.mapReduce2``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``1,System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed Map/Reduce workflow with cluster balancing.
 </summary>
 <param name="mapper">Mapper workflow.</param>
 <param name="reducer">Reducer workflow.</param>
 <param name="init">Initial state and identity element.</param>
 <param name="source">Input source.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.mapReduce``2(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{``1}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,MBrace.Local{``1}}},``1,System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed Map/Reduce workflow with cluster balancing.
 </summary>
 <param name="mapper">Mapper workflow.</param>
 <param name="reducer">Reducer workflow.</param>
 <param name="init">Initial state and identity element.</param>
 <param name="source">Input source.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.iter``1(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed iter combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="body">Iterator body.</param>
 <param name="source">Input sequence.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.fold2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0,System.Collections.Generic.IEnumerable{``1})">
 <summary>
     Distributed fold combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="folder">Folding workflow.</param>
 <param name="reducer">Reducing function.</param>
 <param name="init">Initial state and identity element.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.fold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,MBrace.Local{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{``0}}},``0,System.Collections.Generic.IEnumerable{``1})">
 <summary>
     Distributed fold combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="folder">Folding workflow.</param>
 <param name="reducer">Reducing function.</param>
 <param name="init">Initial state and identity element.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.collect2``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distrbuted collect combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="collector">Collector function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distrbuted collect combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="collector">Collector function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.choose2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed choose combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="chooser">Chooser function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{Microsoft.FSharp.Core.FSharpOption{``1}}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed choose combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="chooser">Chooser function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.filter2``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed filter combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="predicate">Predicate function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{System.Boolean}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed filter combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="predicate">Predicate function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.map2``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed map combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="mapper">Mapper function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed map combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="mapper">Mapper function.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.DivideAndConquer.reduceCombine``2(Microsoft.FSharp.Core.FSharpFunc{``0[],MBrace.Local{``1}},Microsoft.FSharp.Core.FSharpFunc{``1[],MBrace.Local{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Distributed reduceCombine combinator. Input data is partitioned according to cluster size
     and distributed to worker nodes accordingly. It is then further partitioned
     according to the processor count of each worker.
 </summary>
 <param name="reducer">Sequential reducer workflow.</param>
 <param name="combiner">Combiner function that sequentially composes a collection of results.</param>
 <param name="source">Input data.</param>
</member>
<member name="T:MBrace.Workflows.DivideAndConquer">
<summary>
 Collection of combinators that split workloads to workers
 according to multicore capacity.
</summary>
</member>
<member name="M:MBrace.Workflows.Local.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},MBrace.Local{``0})">
 <summary>
     Local workflow map combinator.
 </summary>
 <param name="mapper">Mapping function.</param>
 <param name="tworkflow">Input workflow.</param>
</member>
<member name="M:MBrace.Workflows.Local.lift2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,``1)">
 <summary>
     Lifts function to local workflow.
 </summary>
 <param name="f">Input function</param>
</member>
<member name="M:MBrace.Workflows.Local.lift``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
 <summary>
     Lifts function to local workflow.
 </summary>
 <param name="f">Input function</param>
</member>
<member name="M:MBrace.Workflows.Local.ret``1(``0)">
 <summary>
     Embeds a value in local workflow.
 </summary>
 <param name="t">Value to be embedded.</param>
</member>
<member name="T:MBrace.Workflows.Local">

</member>
<member name="M:MBrace.Workflows.Sequential.iter``1(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Sequential iter combinator.
 </summary>
 <param name="body">Iterator body.</param>
 <param name="source">Input sequence.</param>
</member>
<member name="M:MBrace.Workflows.Sequential.tryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{Microsoft.FSharp.Core.FSharpOption{``1}}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Sequential tryPick combinator.
 </summary>
 <param name="chooser">Choice function.</param>
 <param name="source">Input sequence.</param>
</member>
<member name="M:MBrace.Workflows.Sequential.tryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{System.Boolean}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Sequential tryFind combinator.
 </summary>
 <param name="predicate">Predicate function.</param>
 <param name="source">Input sequence.</param>
</member>
<member name="M:MBrace.Workflows.Sequential.lazyCollect``3(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Sequential lazy collect combinator.
 </summary>
 <param name="collector">Collector function.</param>
 <param name="source">Source data.</param>
</member>
<member name="M:MBrace.Workflows.Sequential.collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Sequential eager collect combinator.
 </summary>
 <param name="collector">Collector function.</param>
 <param name="source">Source data.</param>
</member>
<member name="M:MBrace.Workflows.Sequential.fold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,MBrace.Local{``0}}},``0,System.Collections.Generic.IEnumerable{``1})">
 <summary>
     Sequential fold combinator.
 </summary>
 <param name="folder">Folding function.</param>
 <param name="state">Initial state.</param>
 <param name="source">Input data.</param>
</member>
<member name="M:MBrace.Workflows.Sequential.choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{Microsoft.FSharp.Core.FSharpOption{``1}}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Sequential choose combinator.
 </summary>
 <param name="chooser">Choice function.</param>
 <param name="source">Input sequence.</param>
</member>
<member name="M:MBrace.Workflows.Sequential.filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{System.Boolean}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Sequential filter combinator.
 </summary>
 <param name="predicate">Predicate function.</param>
 <param name="source">Input sequence.</param>
</member>
<member name="M:MBrace.Workflows.Sequential.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Sequential map combinator.
 </summary>
 <param name="mapper">Mapper function.</param>
 <param name="source">Source sequence.</param>
</member>
<member name="T:MBrace.Workflows.Sequential">
<summary>
 Collection of cloud combinators with sequential execution semantics.
</summary>
</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
