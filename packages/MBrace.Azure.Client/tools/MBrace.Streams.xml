<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MBrace.Streams</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.AtomCloudVector`1">
<summary>
 Cloud vector implementation that keeps cache information in a single cloud atom
</summary>
</member>
<member name="P:MBrace.Streams.FSharpCloudFileReader.ReadLines">
<summary>
 Read lazily the given stream as a sequence of lines.
</summary>
</member>
<member name="P:MBrace.Streams.FSharpCloudFileReader.ReadAllText">
<summary>
 Read the given stream as a string.
</summary>
</member>
<member name="P:MBrace.Streams.FSharpCloudFileReader.ReadAllLines">
<summary>
 Read the given stream as an array of lines.
</summary>
</member>
<member name="P:MBrace.Streams.FSharpCloudFileReader.ReadAllBytes">
<summary>
 Read the given stream as an array of bytes.
</summary>
</member>
<member name="T:MBrace.Streams.FSharpCloudFileReader">
<summary>
 Common readers for a CloudFile.
</summary>
</member>
<member name="P:MBrace.Streams.CloudStream`1.DegreeOfParallelism">
<summary>
 The number of concurrently executing tasks
</summary>
</member>
<member name="M:MBrace.Streams.CloudStream`1.Apply``2(MBrace.Local{MBrace.Streams.Collector{`0,``0}},Microsoft.FSharp.Core.FSharpFunc{``0,MBrace.Local{``1}},Microsoft.FSharp.Core.FSharpFunc{``1[],MBrace.Local{``1}})">
<summary>
 Applies the given collector to the CloudStream.
</summary>
</member>
<member name="T:MBrace.Streams.CloudStream`1">
<summary>
 Represents a distributed Stream of values.
</summary>
</member>
<member name="M:MBrace.Streams.CloudVector.OfPartitions``1(System.Collections.Generic.IEnumerable{MBrace.CloudSequence{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a new CloudVector out of a collection of CloudSequence partitions
 </summary>
 <param name="partitions">CloudSequences that constitute the vector.</param>
 <param name="enableCaching">Enable in-memory caching of partitions in worker roles. Defaults to true.</param>
</member>
<member name="M:MBrace.Streams.CloudVector.OfCloudFiles``1(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a cloudvector instance using a collection of cloud files and provided deserializer method.
 </summary>
 <param name="files">Input file paths.</param>
 <param name="deserializer">Deserializer lambda for given file.</param>
 <param name="enableCaching">Enable in-memory caching for CloudVector instance. Defaults to true.</param>
</member>
<member name="M:MBrace.Streams.CloudVector.New``1(System.Collections.Generic.IEnumerable{``0},System.Int64,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Creates a CloudVector in file store using a collection of sequences with specified partition size.
 </summary>
 <param name="values">Inputs values for cloud vector.</param>
 <param name="maxPartitionSize">Maximum size in bytes for each vector partition in file store.</param>
 <param name="enableCaching">Enable caching for cloud vector instance. Defaults to true.</param>
</member>
<member name="M:MBrace.Streams.CloudVector.Merge``1(System.Collections.Generic.IEnumerable{MBrace.Streams.CloudVector{``0}})">
 <summary>
     Merge a collection of cloud vectors into a single instance.
 </summary>
 <param name="components">CloudVector components.</param>
</member>
<member name="T:MBrace.Streams.CloudVector">
<summary>
 Cloud vector static API
</summary>
</member>
<member name="P:MBrace.Streams.CloudVector`1.PartitionCount">
<summary>
 Gets the partition count for cloud vector.
</summary>
</member>
<member name="P:MBrace.Streams.CloudVector`1.Item(System.Int32)">
<summary>
 Gets partition of given index.
</summary>
</member>
<member name="P:MBrace.Streams.CloudVector`1.IsCachingSupported">
<summary>
 Gets the cache support status for cloud vector instance.
</summary>
</member>
<member name="P:MBrace.Streams.CloudVector`1.Count">
<summary>
 Gets the total element count for the cloud vector.
</summary>
</member>
<member name="M:MBrace.Streams.CloudVector`1.UpdateCacheState(MBrace.IWorkerRef,System.Int32[])">
<summary>
 Updates the cache state to include provided indices for given worker ref.
</summary>
</member>
<member name="M:MBrace.Streams.CloudVector`1.ToEnumerable">
<summary>
 Returns a local enumerable that iterates through
 all elements of the cloud vector.
</summary>
</member>
<member name="M:MBrace.Streams.CloudVector`1.GetPartition(System.Int32)">
<summary>
 Gets partition of given index.
</summary>
</member>
<member name="M:MBrace.Streams.CloudVector`1.GetCacheState">
<summary>
 Gets the current cache state of the vector inside the cluster.
</summary>
</member>
<member name="M:MBrace.Streams.CloudVector`1.GetAllPartitions">
<summary>
 Gets all partitions of contained in the vector.
</summary>
</member>
<member name="">

</member>
<member name="M:MBrace.Streams.CloudVector`1.Dispose">
<summary>
 Disposes cloud vector from store.
</summary>
</member>
<member name="">

</member>
<member name="T:MBrace.Streams.CloudVector`1">
<summary>
 Represents an ordered collection of values stored in CloudSequence partitions.
</summary>
</member>
<member name="P:MBrace.Streams.Collector`2.Result">
<summary>
 The result of the collector.
</summary>
</member>
<member name="P:MBrace.Streams.Collector`2.DegreeOfParallelism">
<summary>
 The number of concurrently executing tasks
</summary>
</member>
<member name="M:MBrace.Streams.Collector`2.Iterator">
<summary>
 Gets an iterator over the elements.
</summary>
</member>
<member name="T:MBrace.Streams.Collector`2">
<summary>
 Collects elements into a mutable result container.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.ConcatenatedCloudVector`1">
<summary>
 Cloud vector implementation that results from concatennation of multiple cloudvectors
</summary>
</member>
<member name="T:MBrace.Streams.WorkerCacheState">
<summary>
 Represents the cached indices corresponding to each worker node of the cluster
</summary>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.forall``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},MBrace.Streams.CloudStream{``0})">
 <summary>Tests if all elements of the parallel stream satisfy the given predicate.</summary>
 <param name="predicate">A function to test each source element for a condition.</param>
 <param name="stream">The input cloud stream.</param>
 <returns>true if all of the elements satisfies the predicate. Otherwise, returns false.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},MBrace.Streams.CloudStream{``0})">
 <summary>Tests if any element of the stream satisfies the given predicate.</summary>
 <param name="predicate">A function to test each source element for a condition.</param>
 <param name="stream">The input cloud stream.</param>
 <returns>true if any element satisfies the predicate. Otherwise, returns false.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},MBrace.Streams.CloudStream{``0})">
 <summary>Applies the given function to successive elements, returning the first result where the function returns a Some value.
 Raises KeyNotFoundException when every item of the cloud stream evaluates to None when the given function is applied.</summary>
 <param name="chooser">A function that transforms items into options.</param>
 <param name="stream">The input cloud stream.</param>
 <returns>The first element for which the chooser returns Some, or raises KeyNotFoundException if every element evaluates to None.</returns>
 <exception cref="System.KeyNotFoundException">Thrown if every item of the cloud stream evaluates to None when the given function is applied.</exception>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.tryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},MBrace.Streams.CloudStream{``0})">
 <summary>Applies the given function to successive elements, returning the first result where the function returns a Some value.</summary>
 <param name="chooser">A function that transforms items into options.</param>
 <param name="stream">The input cloud stream.</param>
 <returns>The first element for which the chooser returns Some, or None if every element evaluates to None.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},MBrace.Streams.CloudStream{``0})">
 <summary>Returns the first element for which the given function returns true. Raises KeyNotFoundException if no such element exists.</summary>
 <param name="predicate">A function to test each source element for a condition.</param>
 <param name="stream">The input cloud stream.</param>
 <returns>The first element for which the predicate returns true.</returns>
 <exception cref="System.KeyNotFoundException">Thrown if the predicate evaluates to false for all the elements of the cloud stream.</exception>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.tryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},MBrace.Streams.CloudStream{``0})">
 <summary>Returns the first element for which the given function returns true. Returns None if no such element exists.</summary>
 <param name="predicate">A function to test each source element for a condition.</param>
 <param name="stream">The input cloud stream.</param>
 <returns>The first element for which the predicate returns true, or None if every element evaluates to false.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.sortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Int32,MBrace.Streams.CloudStream{``0})">
 <summary>Applies a key-generating function to each element of the input CloudStream and yields the CloudStream of the given length, ordered by keys.</summary>
 <param name="projection">A function to transform items of the input CloudStream into comparable keys.</param>
 <param name="stream">The input CloudStream.</param>
 <param name="takeCount">The number of elements to return.</param>
 <returns>The result CloudStream.</returns>  
</member>
<member name="M:MBrace.Streams.CloudStreamModule.toCloudVector``1(MBrace.Streams.CloudStream{``0})">
 <summary>Creates a CloudVector from the given CloudStream.</summary>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudVector.</returns>    
</member>
<member name="M:MBrace.Streams.CloudStreamModule.toArray``1(MBrace.Streams.CloudStream{``0})">
 <summary>Creates an array from the given CloudStream.</summary>
 <param name="stream">The input CloudStream.</param>
 <returns>The result array.</returns>    
</member>
<member name="M:MBrace.Streams.CloudStreamModule.length``1(MBrace.Streams.CloudStream{``0})">
 <summary>Returns the total number of elements of the CloudStream.</summary>
 <param name="stream">The input CloudStream.</param>
 <returns>The total number of elements.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.sum``1(MBrace.Streams.CloudStream{``0})">
 <summary>Returns the sum of the elements.</summary>
 <param name="stream">The input CloudStream.</param>
 <returns>The sum of the elements.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.countBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},MBrace.Streams.CloudStream{``0})">
 <summary>
 Applies a key-generating function to each element of a CloudStream and return a CloudStream yielding unique keys and their number of occurrences in the original sequence.
 </summary>
 <param name="projection">A function that maps items from the input CloudStream to keys.</param>
 <param name="stream">The input CloudStream.</param>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.foldBy``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,``2}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``2,``2}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``2},MBrace.Streams.CloudStream{``0})">
 <summary>Applies a key-generating function to each element of a CloudStream and return a CloudStream yielding unique keys and the result of the threading an accumulator.</summary>
 <param name="projection">A function to transform items from the input CloudStream to keys.</param>
 <param name="folder">A function that updates the state with each element from the CloudStream.</param>
 <param name="combiner">A function that combines partial states into a new state.</param>
 <param name="state">A function that produces the initial state.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The final result.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.fold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},MBrace.Streams.CloudStream{``1})">
 <summary>Applies a function to each element of the CloudStream, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN, then this function computes f (... (f s i0)...) iN.</summary>
 <param name="folder">A function that updates the state with each element from the CloudStream.</param>
 <param name="combiner">A function that combines partial states into a new state.</param>
 <param name="state">A function that produces the initial state.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The final result.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.withDegreeOfParallelism``1(System.Int32,MBrace.Streams.CloudStream{``0})">
 <summary>Returns a cloud stream with a new degree of parallelism.</summary>
 <param name="degreeOfParallelism">The degree of parallelism.</param>
 <param name="stream">The input cloud stream.</param>
 <returns>The result cloud stream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},MBrace.Streams.CloudStream{``0})">
 <summary>Filters the elements of the input CloudStream.</summary>
 <param name="predicate">A function to test each source element for a condition.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Nessos.Streams.Stream{``1}},MBrace.Streams.CloudStream{``0})">
 <summary>Transforms each element of the input CloudStream to a new stream and flattens its elements.</summary>
 <param name="f">A function to transform items from the input CloudStream.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.flatMap``2(Microsoft.FSharp.Core.FSharpFunc{``0,Nessos.Streams.Stream{``1}},MBrace.Streams.CloudStream{``0})">
 <summary>Transforms each element of the input CloudStream to a new stream and flattens its elements.</summary>
 <param name="f">A function to transform items from the input CloudStream.</param>
 <param name="stream">The input CloudStream.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},MBrace.Streams.CloudStream{``0})">
<summary>
 use sequential computation; should probably allow some degree of parallelization
 &lt;summary&gt;Transforms each element of the input CloudStream.&lt;/summary&gt;
 &lt;param name=&quot;f&quot;&gt;A function to transform items from the input CloudStream.&lt;/param&gt;
 &lt;param name=&quot;stream&quot;&gt;The input CloudStream.&lt;/param&gt;
 &lt;returns&gt;The result CloudStream.&lt;/returns&gt;
</summary>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.ofCloudVector``1(MBrace.Streams.CloudVector{``0})">
 <summary>
 Constructs a CloudStream from a CloudVector.
 </summary>
 <param name="source">The input CloudVector.</param>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.ofCloudFiles``1(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}},System.Collections.Generic.IEnumerable{MBrace.CloudFile})">
 <summary>
 Constructs a CloudStream from a collection of CloudFiles using the given reader.
 </summary>
 <param name="reader">A function to transform the contents of a CloudFile to an object.</param>
 <param name="sources">The collection of CloudFiles.</param>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.ofArray``1(``0[])">
 <summary>Wraps array as a CloudStream.</summary>
 <param name="source">The input array.</param>
 <returns>The result CloudStream.</returns>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.toParStreamCollector``2(MBrace.Streams.Collector{``0,``1})">
<summary>
 Converts MBrace.Streams.Collector to Nessos.Streams.Collector
</summary>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.parallelInChunks``1(System.Int32,MBrace.Local{``0}[])">
<summary>
 Flat map/reduce with sequential execution on leafs.
</summary>
</member>
<member name="M:MBrace.Streams.CloudStreamModule.getPartitionIndices``1(MBrace.Streams.CloudVector{``0})">
<summary>
 gets all partition indices found in cloud vector
</summary>
</member>
<member name="P:MBrace.Streams.CloudStreamModule.maxCloudVectorPartitionSize">
<summary>
 Maximum CloudVector partition size used in CloudVector.New.
</summary>
</member>
<member name="P:MBrace.Streams.CloudStreamModule.maxCloudFileCombinedLength">
<summary>
 Maximum combined stream length used in ofCloudFiles.
</summary>
</member>
<member name="T:MBrace.Streams.CloudStreamModule">
<summary>
 Provides basic operations on CloudStreams.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.Internals.CSharpProxy">
<summary>
 [omit]
 Proxy for FSharp type specialization and lambda inlining.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.Partitions">

</member>
<member name="">

</member>
<member name="T:MBrace.Streams.Utils">

</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
